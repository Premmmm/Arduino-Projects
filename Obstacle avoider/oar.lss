
oar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000028a  00000000  00000000  000001a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f5  00000000  00000000  00000433  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000258  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c8  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000190  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
DDRD=0b00000000;    // to set part d as input
  6c:	11 ba       	out	0x11, r1	; 17
DDRB=0b11111111;  // to set part b as output
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
PORTD=0b11111111; // to pull up input
  72:	82 bb       	out	0x12, r24	; 18

while(1)  //infinite loop
{
c=PIND;
if(c==0b11111111)  //no obstacle
     PORTB=0b00001010; //forward
  74:	ba e0       	ldi	r27, 0x0A	; 10
PORTB=0b00001001;
_delay_ms(200);
}
if(c==0b11111100)      // obstacle to center and right
{
PORTB=0b00000101;       // back and left
  76:	55 e0       	ldi	r21, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	20 e5       	ldi	r18, 0x50	; 80
  7a:	33 ec       	ldi	r19, 0xC3	; 195
_delay_ms(200);
PORTB=0b00000110;
  7c:	a6 e0       	ldi	r26, 0x06	; 6
     PORTB=0b00000110;	    //left
if(c==0b11111101)        //center obstacle
{
 PORTB=0b00000101;       //back and right
_delay_ms(200);
PORTB=0b00001001;
  7e:	49 e0       	ldi	r20, 0x09	; 9
  80:	69 e1       	ldi	r22, 0x19	; 25
  82:	70 e0       	ldi	r23, 0x00	; 0

int c;

while(1)  //infinite loop
{
c=PIND;
  84:	80 b3       	in	r24, 0x10	; 16
  86:	90 e0       	ldi	r25, 0x00	; 0
if(c==0b11111111)  //no obstacle
  88:	8f 3f       	cpi	r24, 0xFF	; 255
  8a:	91 05       	cpc	r25, r1
  8c:	11 f4       	brne	.+4      	; 0x92 <main+0x26>
     PORTB=0b00001010; //forward
  8e:	b8 bb       	out	0x18, r27	; 24
  90:	1d c0       	rjmp	.+58     	; 0xcc <main+0x60>
if(c==0b11111110)          // right obstacle
  92:	8e 3f       	cpi	r24, 0xFE	; 254
  94:	91 05       	cpc	r25, r1
  96:	11 f4       	brne	.+4      	; 0x9c <main+0x30>
     PORTB=0b00000110;	    //left
  98:	a8 bb       	out	0x18, r26	; 24
  9a:	1d c0       	rjmp	.+58     	; 0xd6 <main+0x6a>
if(c==0b11111101)        //center obstacle
  9c:	8d 3f       	cpi	r24, 0xFD	; 253
  9e:	91 05       	cpc	r25, r1
  a0:	49 f4       	brne	.+18     	; 0xb4 <main+0x48>
{
 PORTB=0b00000101;       //back and right
  a2:	58 bb       	out	0x18, r21	; 24
  a4:	f9 01       	movw	r30, r18
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x3a>
_delay_ms(200);
PORTB=0b00001001;
  aa:	48 bb       	out	0x18, r20	; 24
  ac:	f9 01       	movw	r30, r18
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x42>
  b2:	14 c0       	rjmp	.+40     	; 0xdc <main+0x70>
_delay_ms(200);
}
if(c==0b11111100)      // obstacle to center and right
  b4:	8c 3f       	cpi	r24, 0xFC	; 252
  b6:	91 05       	cpc	r25, r1
  b8:	49 f4       	brne	.+18     	; 0xcc <main+0x60>
{
PORTB=0b00000101;       // back and left
  ba:	58 bb       	out	0x18, r21	; 24
  bc:	f9 01       	movw	r30, r18
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x52>
_delay_ms(200);
PORTB=0b00000110;
  c2:	a8 bb       	out	0x18, r26	; 24
  c4:	f9 01       	movw	r30, r18
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x5a>
  ca:	14 c0       	rjmp	.+40     	; 0xf4 <main+0x88>
_delay_ms(200);
}
if(c==0b11111011)      // obstacle to left
  cc:	8b 3f       	cpi	r24, 0xFB	; 251
  ce:	91 05       	cpc	r25, r1
  d0:	11 f4       	brne	.+4      	; 0xd6 <main+0x6a>
PORTB=0b00001001;         // right
  d2:	48 bb       	out	0x18, r20	; 24
  d4:	d7 cf       	rjmp	.-82     	; 0x84 <main+0x18>

if(c==0b11111010)        // obstacle to both right and left
  d6:	8a 3f       	cpi	r24, 0xFA	; 250
  d8:	91 05       	cpc	r25, r1
  da:	19 f0       	breq	.+6      	; 0xe2 <main+0x76>
PORTB=0b00000101;       // back and right
_delay_ms(200);
PORTB=0b00001001;
_delay_ms(200);
}
if(c==0b11111001)      // obstacle to center and left
  dc:	89 3f       	cpi	r24, 0xF9	; 249
  de:	91 05       	cpc	r25, r1
  e0:	49 f4       	brne	.+18     	; 0xf4 <main+0x88>
{
PORTB=0b00000101;   // back and right
  e2:	58 bb       	out	0x18, r21	; 24
  e4:	c9 01       	movw	r24, r18
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x7a>
_delay_ms(200);
PORTB=0b00001001;
  ea:	48 bb       	out	0x18, r20	; 24
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x82>
  f2:	c8 cf       	rjmp	.-112    	; 0x84 <main+0x18>
_delay_ms(200);
}

if(c==0b11111000)   // obstacle up front 
  f4:	88 3f       	cpi	r24, 0xF8	; 248
  f6:	91 05       	cpc	r25, r1
  f8:	09 f0       	breq	.+2      	; 0xfc <main+0x90>
  fa:	c4 cf       	rjmp	.-120    	; 0x84 <main+0x18>
{
PORTB=0b00000101;   //  back and u-turn
  fc:	58 bb       	out	0x18, r21	; 24
  fe:	c9 01       	movw	r24, r18
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x94>
_delay_ms(200);
PORTB=0b00001001;
 104:	48 bb       	out	0x18, r20	; 24
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	9e e4       	ldi	r25, 0x4E	; 78
 10a:	fb 01       	movw	r30, r22
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0xa0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <main+0x9e>
 114:	b7 cf       	rjmp	.-146    	; 0x84 <main+0x18>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
