
ldrpot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000024a  00000000  00000000  00000555  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011a  00000000  00000000  0000079f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000270  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e5  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000018e  00000000  00000000  00000c51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_adc>:
#include<avr/io.h>
#include<util/delay.h>

void init_adc()
{
ADCSRA|=0b00000001<<ADEN;
  6c:	37 9a       	sbi	0x06, 7	; 6
ADCSRA|=0b00000001<<ADPS2;
  6e:	32 9a       	sbi	0x06, 2	; 6
ADMUX|=0b00000001<<REFS0;
  70:	3e 9a       	sbi	0x07, 6	; 7
}
  72:	08 95       	ret

00000074 <read_adc>:

unsigned int read_adc(int p)
{
ADMUX&=0b01000000;
  74:	97 b1       	in	r25, 0x07	; 7
  76:	90 74       	andi	r25, 0x40	; 64
  78:	97 b9       	out	0x07, r25	; 7
ADMUX=ADMUX|p;
  7a:	97 b1       	in	r25, 0x07	; 7
  7c:	98 2b       	or	r25, r24
  7e:	97 b9       	out	0x07, r25	; 7
ADCSRA=ADCSRA|(0b00000001<<ADSC);
  80:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&(0b00000001<<ADIF))==0)
  82:	34 9b       	sbis	0x06, 4	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <read_adc+0xe>
{}
ADCSRA=ADCSRA|(0b00000001<<ADIF);
  86:	34 9a       	sbi	0x06, 4	; 6
return(ADC);
  88:	24 b1       	in	r18, 0x04	; 4
  8a:	35 b1       	in	r19, 0x05	; 5
}
  8c:	c9 01       	movw	r24, r18
  8e:	08 95       	ret

00000090 <main>:

void main()
{
  90:	7f 92       	push	r7
  92:	8f 92       	push	r8
  94:	9f 92       	push	r9
  96:	af 92       	push	r10
  98:	bf 92       	push	r11
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
DDRB=0b11111111;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 bb       	out	0x17, r24	; 23
init_adc();
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <init_adc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b2:	80 e5       	ldi	r24, 0x50	; 80
  b4:	93 ec       	ldi	r25, 0xC3	; 195
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x26>
while(1) 
{ 
p=read_adc(0);
if(p<=842)    // LDR
{
PORTB=0b000001010;
  ba:	9a e0       	ldi	r25, 0x0A	; 10
  bc:	79 2e       	mov	r7, r25
b=(z/40);
T=25.6;
TOFF1=b;
TON1=T-TOFF1;
PORTB=0b00001010;
_delay_ms(TON1);
  be:	89 e1       	ldi	r24, 0x19	; 25
  c0:	88 2e       	mov	r8, r24
  c2:	91 2c       	mov	r9, r1
unsigned int TON1;
unsigned int TOFF1;

while(1) 
{ 
p=read_adc(0);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc>
if(p<=842)    // LDR
  cc:	8b 54       	subi	r24, 0x4B	; 75
  ce:	93 40       	sbci	r25, 0x03	; 3
  d0:	10 f4       	brcc	.+4      	; 0xd6 <main+0x46>
{
PORTB=0b000001010;
  d2:	78 ba       	out	0x18, r7	; 24
  d4:	f7 cf       	rjmp	.-18     	; 0xc4 <main+0x34>
}
else if(p>842)           // Potentiometer 
{
z=read_adc(1);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc>
b=(z/40);
  de:	68 e2       	ldi	r22, 0x28	; 40
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	0e 94 40 02 	call	0x480	; 0x480 <__udivmodhi4>
  e6:	eb 01       	movw	r28, r22
T=25.6;
TOFF1=b;
TON1=T-TOFF1;
PORTB=0b00001010;
  e8:	78 ba       	out	0x18, r7	; 24
_delay_ms(TON1);
  ea:	b4 01       	movw	r22, r8
  ec:	6c 1b       	sub	r22, r28
  ee:	7d 0b       	sbc	r23, r29
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 27 01 	call	0x24e	; 0x24e <__floatunsisf>
  f8:	5b 01       	movw	r10, r22
  fa:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	4a e7       	ldi	r20, 0x7A	; 122
 102:	53 e4       	ldi	r21, 0x43	; 67
 104:	0e 94 b5 01 	call	0x36a	; 0x36a <__mulsf3>
 108:	7b 01       	movw	r14, r22
 10a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 e8       	ldi	r20, 0x80	; 128
 112:	5f e3       	ldi	r21, 0x3F	; 63
 114:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__cmpsf2>
 118:	88 23       	and	r24, r24
 11a:	1c f4       	brge	.+6      	; 0x122 <main+0x92>
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	22 c0       	rjmp	.+68     	; 0x166 <main+0xd6>
		__ticks = 1;
	else if (__tmp > 65535)
 122:	c8 01       	movw	r24, r16
 124:	b7 01       	movw	r22, r14
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	3f ef       	ldi	r19, 0xFF	; 255
 12a:	4f e7       	ldi	r20, 0x7F	; 127
 12c:	57 e4       	ldi	r21, 0x47	; 71
 12e:	0e 94 b1 01 	call	0x362	; 0x362 <__gesf2>
 132:	18 16       	cp	r1, r24
 134:	a4 f4       	brge	.+40     	; 0x15e <main+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 136:	c6 01       	movw	r24, r12
 138:	b5 01       	movw	r22, r10
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e2       	ldi	r20, 0x20	; 32
 140:	51 e4       	ldi	r21, 0x41	; 65
 142:	0e 94 b5 01 	call	0x36a	; 0x36a <__mulsf3>
 146:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__fixunssfsi>
 14a:	05 c0       	rjmp	.+10     	; 0x156 <main+0xc6>
 14c:	c4 01       	movw	r24, r8
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0xbe>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 152:	61 50       	subi	r22, 0x01	; 1
 154:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 156:	61 15       	cp	r22, r1
 158:	71 05       	cpc	r23, r1
 15a:	c1 f7       	brne	.-16     	; 0x14c <main+0xbc>
 15c:	07 c0       	rjmp	.+14     	; 0x16c <main+0xdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 15e:	c8 01       	movw	r24, r16
 160:	b7 01       	movw	r22, r14
 162:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__fixunssfsi>
 166:	cb 01       	movw	r24, r22
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0xd8>
PORTB=0b00000000;
 16c:	18 ba       	out	0x18, r1	; 24
_delay_ms(TOFF1);
 16e:	be 01       	movw	r22, r28
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 27 01 	call	0x24e	; 0x24e <__floatunsisf>
 178:	5b 01       	movw	r10, r22
 17a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	4a e7       	ldi	r20, 0x7A	; 122
 182:	53 e4       	ldi	r21, 0x43	; 67
 184:	0e 94 b5 01 	call	0x36a	; 0x36a <__mulsf3>
 188:	7b 01       	movw	r14, r22
 18a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__cmpsf2>
 198:	88 23       	and	r24, r24
 19a:	1c f4       	brge	.+6      	; 0x1a2 <main+0x112>
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	22 c0       	rjmp	.+68     	; 0x1e6 <main+0x156>
		__ticks = 1;
	else if (__tmp > 65535)
 1a2:	c8 01       	movw	r24, r16
 1a4:	b7 01       	movw	r22, r14
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	3f ef       	ldi	r19, 0xFF	; 255
 1aa:	4f e7       	ldi	r20, 0x7F	; 127
 1ac:	57 e4       	ldi	r21, 0x47	; 71
 1ae:	0e 94 b1 01 	call	0x362	; 0x362 <__gesf2>
 1b2:	18 16       	cp	r1, r24
 1b4:	a4 f4       	brge	.+40     	; 0x1de <main+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b6:	c6 01       	movw	r24, r12
 1b8:	b5 01       	movw	r22, r10
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e2       	ldi	r20, 0x20	; 32
 1c0:	51 e4       	ldi	r21, 0x41	; 65
 1c2:	0e 94 b5 01 	call	0x36a	; 0x36a <__mulsf3>
 1c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__fixunssfsi>
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <main+0x146>
 1cc:	c4 01       	movw	r24, r8
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x13e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d2:	61 50       	subi	r22, 0x01	; 1
 1d4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d6:	61 15       	cp	r22, r1
 1d8:	71 05       	cpc	r23, r1
 1da:	c1 f7       	brne	.-16     	; 0x1cc <main+0x13c>
 1dc:	73 cf       	rjmp	.-282    	; 0xc4 <main+0x34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1de:	c8 01       	movw	r24, r16
 1e0:	b7 01       	movw	r22, r14
 1e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__fixunssfsi>
 1e6:	cb 01       	movw	r24, r22
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x158>
 1ec:	6b cf       	rjmp	.-298    	; 0xc4 <main+0x34>

000001ee <__cmpsf2>:
 1ee:	6c d0       	rcall	.+216    	; 0x2c8 <__fp_cmp>
 1f0:	08 f4       	brcc	.+2      	; 0x1f4 <__cmpsf2+0x6>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	08 95       	ret

000001f6 <__fixunssfsi>:
 1f6:	94 d0       	rcall	.+296    	; 0x320 <__fp_splitA>
 1f8:	88 f0       	brcs	.+34     	; 0x21c <__fixunssfsi+0x26>
 1fa:	9f 57       	subi	r25, 0x7F	; 127
 1fc:	90 f0       	brcs	.+36     	; 0x222 <__fixunssfsi+0x2c>
 1fe:	b9 2f       	mov	r27, r25
 200:	99 27       	eor	r25, r25
 202:	b7 51       	subi	r27, 0x17	; 23
 204:	a0 f0       	brcs	.+40     	; 0x22e <__fixunssfsi+0x38>
 206:	d1 f0       	breq	.+52     	; 0x23c <__fixunssfsi+0x46>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	88 1f       	adc	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	1a f0       	brmi	.+6      	; 0x218 <__fixunssfsi+0x22>
 212:	ba 95       	dec	r27
 214:	c9 f7       	brne	.-14     	; 0x208 <__fixunssfsi+0x12>
 216:	12 c0       	rjmp	.+36     	; 0x23c <__fixunssfsi+0x46>
 218:	b1 30       	cpi	r27, 0x01	; 1
 21a:	81 f0       	breq	.+32     	; 0x23c <__fixunssfsi+0x46>
 21c:	9b d0       	rcall	.+310    	; 0x354 <__fp_zero>
 21e:	b1 e0       	ldi	r27, 0x01	; 1
 220:	08 95       	ret
 222:	98 c0       	rjmp	.+304    	; 0x354 <__fp_zero>
 224:	67 2f       	mov	r22, r23
 226:	78 2f       	mov	r23, r24
 228:	88 27       	eor	r24, r24
 22a:	b8 5f       	subi	r27, 0xF8	; 248
 22c:	39 f0       	breq	.+14     	; 0x23c <__fixunssfsi+0x46>
 22e:	b9 3f       	cpi	r27, 0xF9	; 249
 230:	cc f3       	brlt	.-14     	; 0x224 <__fixunssfsi+0x2e>
 232:	86 95       	lsr	r24
 234:	77 95       	ror	r23
 236:	67 95       	ror	r22
 238:	b3 95       	inc	r27
 23a:	d9 f7       	brne	.-10     	; 0x232 <__fixunssfsi+0x3c>
 23c:	3e f4       	brtc	.+14     	; 0x24c <__fixunssfsi+0x56>
 23e:	90 95       	com	r25
 240:	80 95       	com	r24
 242:	70 95       	com	r23
 244:	61 95       	neg	r22
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	8f 4f       	sbci	r24, 0xFF	; 255
 24a:	9f 4f       	sbci	r25, 0xFF	; 255
 24c:	08 95       	ret

0000024e <__floatunsisf>:
 24e:	e8 94       	clt
 250:	09 c0       	rjmp	.+18     	; 0x264 <__floatsisf+0x12>

00000252 <__floatsisf>:
 252:	97 fb       	bst	r25, 7
 254:	3e f4       	brtc	.+14     	; 0x264 <__floatsisf+0x12>
 256:	90 95       	com	r25
 258:	80 95       	com	r24
 25a:	70 95       	com	r23
 25c:	61 95       	neg	r22
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	8f 4f       	sbci	r24, 0xFF	; 255
 262:	9f 4f       	sbci	r25, 0xFF	; 255
 264:	99 23       	and	r25, r25
 266:	a9 f0       	breq	.+42     	; 0x292 <__floatsisf+0x40>
 268:	f9 2f       	mov	r31, r25
 26a:	96 e9       	ldi	r25, 0x96	; 150
 26c:	bb 27       	eor	r27, r27
 26e:	93 95       	inc	r25
 270:	f6 95       	lsr	r31
 272:	87 95       	ror	r24
 274:	77 95       	ror	r23
 276:	67 95       	ror	r22
 278:	b7 95       	ror	r27
 27a:	f1 11       	cpse	r31, r1
 27c:	f8 cf       	rjmp	.-16     	; 0x26e <__floatsisf+0x1c>
 27e:	fa f4       	brpl	.+62     	; 0x2be <__floatsisf+0x6c>
 280:	bb 0f       	add	r27, r27
 282:	11 f4       	brne	.+4      	; 0x288 <__floatsisf+0x36>
 284:	60 ff       	sbrs	r22, 0
 286:	1b c0       	rjmp	.+54     	; 0x2be <__floatsisf+0x6c>
 288:	6f 5f       	subi	r22, 0xFF	; 255
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	8f 4f       	sbci	r24, 0xFF	; 255
 28e:	9f 4f       	sbci	r25, 0xFF	; 255
 290:	16 c0       	rjmp	.+44     	; 0x2be <__floatsisf+0x6c>
 292:	88 23       	and	r24, r24
 294:	11 f0       	breq	.+4      	; 0x29a <__floatsisf+0x48>
 296:	96 e9       	ldi	r25, 0x96	; 150
 298:	11 c0       	rjmp	.+34     	; 0x2bc <__floatsisf+0x6a>
 29a:	77 23       	and	r23, r23
 29c:	21 f0       	breq	.+8      	; 0x2a6 <__floatsisf+0x54>
 29e:	9e e8       	ldi	r25, 0x8E	; 142
 2a0:	87 2f       	mov	r24, r23
 2a2:	76 2f       	mov	r23, r22
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <__floatsisf+0x5e>
 2a6:	66 23       	and	r22, r22
 2a8:	71 f0       	breq	.+28     	; 0x2c6 <__floatsisf+0x74>
 2aa:	96 e8       	ldi	r25, 0x86	; 134
 2ac:	86 2f       	mov	r24, r22
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	2a f0       	brmi	.+10     	; 0x2be <__floatsisf+0x6c>
 2b4:	9a 95       	dec	r25
 2b6:	66 0f       	add	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	88 1f       	adc	r24, r24
 2bc:	da f7       	brpl	.-10     	; 0x2b4 <__floatsisf+0x62>
 2be:	88 0f       	add	r24, r24
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	97 f9       	bld	r25, 7
 2c6:	08 95       	ret

000002c8 <__fp_cmp>:
 2c8:	99 0f       	add	r25, r25
 2ca:	00 08       	sbc	r0, r0
 2cc:	55 0f       	add	r21, r21
 2ce:	aa 0b       	sbc	r26, r26
 2d0:	e0 e8       	ldi	r30, 0x80	; 128
 2d2:	fe ef       	ldi	r31, 0xFE	; 254
 2d4:	16 16       	cp	r1, r22
 2d6:	17 06       	cpc	r1, r23
 2d8:	e8 07       	cpc	r30, r24
 2da:	f9 07       	cpc	r31, r25
 2dc:	c0 f0       	brcs	.+48     	; 0x30e <__fp_cmp+0x46>
 2de:	12 16       	cp	r1, r18
 2e0:	13 06       	cpc	r1, r19
 2e2:	e4 07       	cpc	r30, r20
 2e4:	f5 07       	cpc	r31, r21
 2e6:	98 f0       	brcs	.+38     	; 0x30e <__fp_cmp+0x46>
 2e8:	62 1b       	sub	r22, r18
 2ea:	73 0b       	sbc	r23, r19
 2ec:	84 0b       	sbc	r24, r20
 2ee:	95 0b       	sbc	r25, r21
 2f0:	39 f4       	brne	.+14     	; 0x300 <__fp_cmp+0x38>
 2f2:	0a 26       	eor	r0, r26
 2f4:	61 f0       	breq	.+24     	; 0x30e <__fp_cmp+0x46>
 2f6:	23 2b       	or	r18, r19
 2f8:	24 2b       	or	r18, r20
 2fa:	25 2b       	or	r18, r21
 2fc:	21 f4       	brne	.+8      	; 0x306 <__fp_cmp+0x3e>
 2fe:	08 95       	ret
 300:	0a 26       	eor	r0, r26
 302:	09 f4       	brne	.+2      	; 0x306 <__fp_cmp+0x3e>
 304:	a1 40       	sbci	r26, 0x01	; 1
 306:	a6 95       	lsr	r26
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	81 1d       	adc	r24, r1
 30c:	81 1d       	adc	r24, r1
 30e:	08 95       	ret

00000310 <__fp_split3>:
 310:	57 fd       	sbrc	r21, 7
 312:	90 58       	subi	r25, 0x80	; 128
 314:	44 0f       	add	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	59 f0       	breq	.+22     	; 0x330 <__fp_splitA+0x10>
 31a:	5f 3f       	cpi	r21, 0xFF	; 255
 31c:	71 f0       	breq	.+28     	; 0x33a <__fp_splitA+0x1a>
 31e:	47 95       	ror	r20

00000320 <__fp_splitA>:
 320:	88 0f       	add	r24, r24
 322:	97 fb       	bst	r25, 7
 324:	99 1f       	adc	r25, r25
 326:	61 f0       	breq	.+24     	; 0x340 <__fp_splitA+0x20>
 328:	9f 3f       	cpi	r25, 0xFF	; 255
 32a:	79 f0       	breq	.+30     	; 0x34a <__fp_splitA+0x2a>
 32c:	87 95       	ror	r24
 32e:	08 95       	ret
 330:	12 16       	cp	r1, r18
 332:	13 06       	cpc	r1, r19
 334:	14 06       	cpc	r1, r20
 336:	55 1f       	adc	r21, r21
 338:	f2 cf       	rjmp	.-28     	; 0x31e <__fp_split3+0xe>
 33a:	46 95       	lsr	r20
 33c:	f1 df       	rcall	.-30     	; 0x320 <__fp_splitA>
 33e:	08 c0       	rjmp	.+16     	; 0x350 <__fp_splitA+0x30>
 340:	16 16       	cp	r1, r22
 342:	17 06       	cpc	r1, r23
 344:	18 06       	cpc	r1, r24
 346:	99 1f       	adc	r25, r25
 348:	f1 cf       	rjmp	.-30     	; 0x32c <__fp_splitA+0xc>
 34a:	86 95       	lsr	r24
 34c:	71 05       	cpc	r23, r1
 34e:	61 05       	cpc	r22, r1
 350:	08 94       	sec
 352:	08 95       	ret

00000354 <__fp_zero>:
 354:	e8 94       	clt

00000356 <__fp_szero>:
 356:	bb 27       	eor	r27, r27
 358:	66 27       	eor	r22, r22
 35a:	77 27       	eor	r23, r23
 35c:	cb 01       	movw	r24, r22
 35e:	97 f9       	bld	r25, 7
 360:	08 95       	ret

00000362 <__gesf2>:
 362:	b2 df       	rcall	.-156    	; 0x2c8 <__fp_cmp>
 364:	08 f4       	brcc	.+2      	; 0x368 <__gesf2+0x6>
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	08 95       	ret

0000036a <__mulsf3>:
 36a:	0b d0       	rcall	.+22     	; 0x382 <__mulsf3x>
 36c:	78 c0       	rjmp	.+240    	; 0x45e <__fp_round>
 36e:	69 d0       	rcall	.+210    	; 0x442 <__fp_pscA>
 370:	28 f0       	brcs	.+10     	; 0x37c <__mulsf3+0x12>
 372:	6e d0       	rcall	.+220    	; 0x450 <__fp_pscB>
 374:	18 f0       	brcs	.+6      	; 0x37c <__mulsf3+0x12>
 376:	95 23       	and	r25, r21
 378:	09 f0       	breq	.+2      	; 0x37c <__mulsf3+0x12>
 37a:	5a c0       	rjmp	.+180    	; 0x430 <__fp_inf>
 37c:	5f c0       	rjmp	.+190    	; 0x43c <__fp_nan>
 37e:	11 24       	eor	r1, r1
 380:	ea cf       	rjmp	.-44     	; 0x356 <__fp_szero>

00000382 <__mulsf3x>:
 382:	c6 df       	rcall	.-116    	; 0x310 <__fp_split3>
 384:	a0 f3       	brcs	.-24     	; 0x36e <__mulsf3+0x4>

00000386 <__mulsf3_pse>:
 386:	95 9f       	mul	r25, r21
 388:	d1 f3       	breq	.-12     	; 0x37e <__mulsf3+0x14>
 38a:	95 0f       	add	r25, r21
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	55 1f       	adc	r21, r21
 390:	62 9f       	mul	r22, r18
 392:	f0 01       	movw	r30, r0
 394:	72 9f       	mul	r23, r18
 396:	bb 27       	eor	r27, r27
 398:	f0 0d       	add	r31, r0
 39a:	b1 1d       	adc	r27, r1
 39c:	63 9f       	mul	r22, r19
 39e:	aa 27       	eor	r26, r26
 3a0:	f0 0d       	add	r31, r0
 3a2:	b1 1d       	adc	r27, r1
 3a4:	aa 1f       	adc	r26, r26
 3a6:	64 9f       	mul	r22, r20
 3a8:	66 27       	eor	r22, r22
 3aa:	b0 0d       	add	r27, r0
 3ac:	a1 1d       	adc	r26, r1
 3ae:	66 1f       	adc	r22, r22
 3b0:	82 9f       	mul	r24, r18
 3b2:	22 27       	eor	r18, r18
 3b4:	b0 0d       	add	r27, r0
 3b6:	a1 1d       	adc	r26, r1
 3b8:	62 1f       	adc	r22, r18
 3ba:	73 9f       	mul	r23, r19
 3bc:	b0 0d       	add	r27, r0
 3be:	a1 1d       	adc	r26, r1
 3c0:	62 1f       	adc	r22, r18
 3c2:	83 9f       	mul	r24, r19
 3c4:	a0 0d       	add	r26, r0
 3c6:	61 1d       	adc	r22, r1
 3c8:	22 1f       	adc	r18, r18
 3ca:	74 9f       	mul	r23, r20
 3cc:	33 27       	eor	r19, r19
 3ce:	a0 0d       	add	r26, r0
 3d0:	61 1d       	adc	r22, r1
 3d2:	23 1f       	adc	r18, r19
 3d4:	84 9f       	mul	r24, r20
 3d6:	60 0d       	add	r22, r0
 3d8:	21 1d       	adc	r18, r1
 3da:	82 2f       	mov	r24, r18
 3dc:	76 2f       	mov	r23, r22
 3de:	6a 2f       	mov	r22, r26
 3e0:	11 24       	eor	r1, r1
 3e2:	9f 57       	subi	r25, 0x7F	; 127
 3e4:	50 40       	sbci	r21, 0x00	; 0
 3e6:	8a f0       	brmi	.+34     	; 0x40a <__mulsf3_pse+0x84>
 3e8:	e1 f0       	breq	.+56     	; 0x422 <__mulsf3_pse+0x9c>
 3ea:	88 23       	and	r24, r24
 3ec:	4a f0       	brmi	.+18     	; 0x400 <__mulsf3_pse+0x7a>
 3ee:	ee 0f       	add	r30, r30
 3f0:	ff 1f       	adc	r31, r31
 3f2:	bb 1f       	adc	r27, r27
 3f4:	66 1f       	adc	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	91 50       	subi	r25, 0x01	; 1
 3fc:	50 40       	sbci	r21, 0x00	; 0
 3fe:	a9 f7       	brne	.-22     	; 0x3ea <__mulsf3_pse+0x64>
 400:	9e 3f       	cpi	r25, 0xFE	; 254
 402:	51 05       	cpc	r21, r1
 404:	70 f0       	brcs	.+28     	; 0x422 <__mulsf3_pse+0x9c>
 406:	14 c0       	rjmp	.+40     	; 0x430 <__fp_inf>
 408:	a6 cf       	rjmp	.-180    	; 0x356 <__fp_szero>
 40a:	5f 3f       	cpi	r21, 0xFF	; 255
 40c:	ec f3       	brlt	.-6      	; 0x408 <__mulsf3_pse+0x82>
 40e:	98 3e       	cpi	r25, 0xE8	; 232
 410:	dc f3       	brlt	.-10     	; 0x408 <__mulsf3_pse+0x82>
 412:	86 95       	lsr	r24
 414:	77 95       	ror	r23
 416:	67 95       	ror	r22
 418:	b7 95       	ror	r27
 41a:	f7 95       	ror	r31
 41c:	e7 95       	ror	r30
 41e:	9f 5f       	subi	r25, 0xFF	; 255
 420:	c1 f7       	brne	.-16     	; 0x412 <__mulsf3_pse+0x8c>
 422:	fe 2b       	or	r31, r30
 424:	88 0f       	add	r24, r24
 426:	91 1d       	adc	r25, r1
 428:	96 95       	lsr	r25
 42a:	87 95       	ror	r24
 42c:	97 f9       	bld	r25, 7
 42e:	08 95       	ret

00000430 <__fp_inf>:
 430:	97 f9       	bld	r25, 7
 432:	9f 67       	ori	r25, 0x7F	; 127
 434:	80 e8       	ldi	r24, 0x80	; 128
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	08 95       	ret

0000043c <__fp_nan>:
 43c:	9f ef       	ldi	r25, 0xFF	; 255
 43e:	80 ec       	ldi	r24, 0xC0	; 192
 440:	08 95       	ret

00000442 <__fp_pscA>:
 442:	00 24       	eor	r0, r0
 444:	0a 94       	dec	r0
 446:	16 16       	cp	r1, r22
 448:	17 06       	cpc	r1, r23
 44a:	18 06       	cpc	r1, r24
 44c:	09 06       	cpc	r0, r25
 44e:	08 95       	ret

00000450 <__fp_pscB>:
 450:	00 24       	eor	r0, r0
 452:	0a 94       	dec	r0
 454:	12 16       	cp	r1, r18
 456:	13 06       	cpc	r1, r19
 458:	14 06       	cpc	r1, r20
 45a:	05 06       	cpc	r0, r21
 45c:	08 95       	ret

0000045e <__fp_round>:
 45e:	09 2e       	mov	r0, r25
 460:	03 94       	inc	r0
 462:	00 0c       	add	r0, r0
 464:	11 f4       	brne	.+4      	; 0x46a <__stack+0xb>
 466:	88 23       	and	r24, r24
 468:	52 f0       	brmi	.+20     	; 0x47e <__stack+0x1f>
 46a:	bb 0f       	add	r27, r27
 46c:	40 f4       	brcc	.+16     	; 0x47e <__stack+0x1f>
 46e:	bf 2b       	or	r27, r31
 470:	11 f4       	brne	.+4      	; 0x476 <__stack+0x17>
 472:	60 ff       	sbrs	r22, 0
 474:	04 c0       	rjmp	.+8      	; 0x47e <__stack+0x1f>
 476:	6f 5f       	subi	r22, 0xFF	; 255
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	8f 4f       	sbci	r24, 0xFF	; 255
 47c:	9f 4f       	sbci	r25, 0xFF	; 255
 47e:	08 95       	ret

00000480 <__udivmodhi4>:
 480:	aa 1b       	sub	r26, r26
 482:	bb 1b       	sub	r27, r27
 484:	51 e1       	ldi	r21, 0x11	; 17
 486:	07 c0       	rjmp	.+14     	; 0x496 <__udivmodhi4_ep>

00000488 <__udivmodhi4_loop>:
 488:	aa 1f       	adc	r26, r26
 48a:	bb 1f       	adc	r27, r27
 48c:	a6 17       	cp	r26, r22
 48e:	b7 07       	cpc	r27, r23
 490:	10 f0       	brcs	.+4      	; 0x496 <__udivmodhi4_ep>
 492:	a6 1b       	sub	r26, r22
 494:	b7 0b       	sbc	r27, r23

00000496 <__udivmodhi4_ep>:
 496:	88 1f       	adc	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	5a 95       	dec	r21
 49c:	a9 f7       	brne	.-22     	; 0x488 <__udivmodhi4_loop>
 49e:	80 95       	com	r24
 4a0:	90 95       	com	r25
 4a2:	bc 01       	movw	r22, r24
 4a4:	cd 01       	movw	r24, r26
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
