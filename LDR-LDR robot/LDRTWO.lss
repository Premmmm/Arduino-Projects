
LDRTWO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000070e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003de  00000000  00000000  00000763  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000138  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000408  00000000  00000000  00000c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f0  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000047e  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_adc>:
#include<avr/io.h>
#include<util/delay.h>
void init_adc()
{
ADCSRA=ADCSRA|(0b00000001<<ADEN);
  6c:	37 9a       	sbi	0x06, 7	; 6
ADCSRA=ADCSRA|(0b00000001<<ADPS2);
  6e:	32 9a       	sbi	0x06, 2	; 6
ADMUX=ADMUX|(0b00000001<<REFS0);
  70:	3e 9a       	sbi	0x07, 6	; 7
}
  72:	08 95       	ret

00000074 <read_adc>:
unsigned int read_adc(int Z)
{
ADMUX&=0b01000000;
  74:	97 b1       	in	r25, 0x07	; 7
  76:	90 74       	andi	r25, 0x40	; 64
  78:	97 b9       	out	0x07, r25	; 7
ADMUX=ADMUX|Z;
  7a:	97 b1       	in	r25, 0x07	; 7
  7c:	98 2b       	or	r25, r24
  7e:	97 b9       	out	0x07, r25	; 7
ADCSRA=ADCSRA|(0b00000001<<ADSC);
  80:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&(0b00000001<<ADIF))==0)
  82:	34 9b       	sbis	0x06, 4	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <read_adc+0xe>
{}
ADCSRA=ADCSRA|(0b00000001<<ADIF);
  86:	34 9a       	sbi	0x06, 4	; 6
return(ADC);
  88:	24 b1       	in	r18, 0x04	; 4
  8a:	35 b1       	in	r19, 0x05	; 5
}
  8c:	c9 01       	movw	r24, r18
  8e:	08 95       	ret

00000090 <main>:
void main()
{
  90:	5f 92       	push	r5
  92:	6f 92       	push	r6
  94:	7f 92       	push	r7
  96:	8f 92       	push	r8
  98:	9f 92       	push	r9
  9a:	af 92       	push	r10
  9c:	bf 92       	push	r11
  9e:	cf 92       	push	r12
  a0:	df 92       	push	r13
  a2:	ef 92       	push	r14
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
DDRB=0b11111111;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
init_adc();
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <init_adc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	80 e5       	ldi	r24, 0x50	; 80
  b8:	93 ec       	ldi	r25, 0xC3	; 195
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x2a>
TON1=T-TOFF1;
q=read_adc(1);
b=(q/40);
T=25.6;
TOFF2=b;
TON2=T-TOFF2;
  be:	39 e1       	ldi	r19, 0x19	; 25
  c0:	83 2e       	mov	r8, r19
  c2:	91 2c       	mov	r9, r1
PORTB=0b00000000;
_delay_ms(TOFF2);
}
else if(p<752)
{
PORTB=0b00000110;
  c4:	26 e0       	ldi	r18, 0x06	; 6
  c6:	72 2e       	mov	r7, r18
T=25.6;
TOFF2=b;
TON2=T-TOFF2;
if(p<752 && q<752)
{
PORTB=0b00001010;
  c8:	9a e0       	ldi	r25, 0x0A	; 10
  ca:	69 2e       	mov	r6, r25
PORTB=0b00000000;
_delay_ms(TOFF1);
}
else if(q<752)
{
PORTB=0b00001001;
  cc:	89 e0       	ldi	r24, 0x09	; 9
  ce:	58 2e       	mov	r5, r24
unsigned int TON2;
unsigned int TOFF1;
unsigned int TOFF2;
while(1)
{
p=read_adc(0);
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc>
  d8:	8c 01       	movw	r16, r24
a=(p/40);
T=25.6;
TOFF1=a;
TON1=T-TOFF1;
q=read_adc(1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc>
  e2:	9c 01       	movw	r18, r24
b=(q/40);
  e4:	68 e2       	ldi	r22, 0x28	; 40
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	0e 94 47 03 	call	0x68e	; 0x68e <__udivmodhi4>
  ec:	eb 01       	movw	r28, r22
T=25.6;
TOFF2=b;
TON2=T-TOFF2;
  ee:	b4 01       	movw	r22, r8
  f0:	6c 1b       	sub	r22, r28
  f2:	7d 0b       	sbc	r23, r29
if(p<752 && q<752)
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	00 3f       	cpi	r16, 0xF0	; 240
  f8:	18 07       	cpc	r17, r24
  fa:	08 f0       	brcs	.+2      	; 0xfe <main+0x6e>
  fc:	fb c0       	rjmp	.+502    	; 0x2f4 <main+0x264>
  fe:	20 5f       	subi	r18, 0xF0	; 240
 100:	32 40       	sbci	r19, 0x02	; 2
 102:	08 f0       	brcs	.+2      	; 0x106 <main+0x76>
 104:	77 c0       	rjmp	.+238    	; 0x1f4 <main+0x164>
{
PORTB=0b00001010;
 106:	68 ba       	out	0x18, r6	; 24
_delay_ms(TON2);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 2e 02 	call	0x45c	; 0x45c <__floatunsisf>
 110:	5b 01       	movw	r10, r22
 112:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	4a e7       	ldi	r20, 0x7A	; 122
 11a:	53 e4       	ldi	r21, 0x43	; 67
 11c:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 120:	7b 01       	movw	r14, r22
 122:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	40 e8       	ldi	r20, 0x80	; 128
 12a:	5f e3       	ldi	r21, 0x3F	; 63
 12c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__cmpsf2>
 130:	88 23       	and	r24, r24
 132:	1c f4       	brge	.+6      	; 0x13a <main+0xaa>
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	22 c0       	rjmp	.+68     	; 0x17e <main+0xee>
		__ticks = 1;
	else if (__tmp > 65535)
 13a:	c8 01       	movw	r24, r16
 13c:	b7 01       	movw	r22, r14
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	3f ef       	ldi	r19, 0xFF	; 255
 142:	4f e7       	ldi	r20, 0x7F	; 127
 144:	57 e4       	ldi	r21, 0x47	; 71
 146:	0e 94 b8 02 	call	0x570	; 0x570 <__gesf2>
 14a:	18 16       	cp	r1, r24
 14c:	a4 f4       	brge	.+40     	; 0x176 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 14e:	c6 01       	movw	r24, r12
 150:	b5 01       	movw	r22, r10
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e2       	ldi	r20, 0x20	; 32
 158:	51 e4       	ldi	r21, 0x41	; 65
 15a:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 15e:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 162:	05 c0       	rjmp	.+10     	; 0x16e <main+0xde>
 164:	c4 01       	movw	r24, r8
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0xd6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	61 50       	subi	r22, 0x01	; 1
 16c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16e:	61 15       	cp	r22, r1
 170:	71 05       	cpc	r23, r1
 172:	c1 f7       	brne	.-16     	; 0x164 <main+0xd4>
 174:	07 c0       	rjmp	.+14     	; 0x184 <main+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 176:	c8 01       	movw	r24, r16
 178:	b7 01       	movw	r22, r14
 17a:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 17e:	cb 01       	movw	r24, r22
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xf0>
PORTB=0b00000000;
 184:	18 ba       	out	0x18, r1	; 24
_delay_ms(TOFF2);
 186:	be 01       	movw	r22, r28
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 2e 02 	call	0x45c	; 0x45c <__floatunsisf>
 190:	5b 01       	movw	r10, r22
 192:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	4a e7       	ldi	r20, 0x7A	; 122
 19a:	53 e4       	ldi	r21, 0x43	; 67
 19c:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 1a0:	7b 01       	movw	r14, r22
 1a2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e8       	ldi	r20, 0x80	; 128
 1aa:	5f e3       	ldi	r21, 0x3F	; 63
 1ac:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__cmpsf2>
 1b0:	88 23       	and	r24, r24
 1b2:	0c f4       	brge	.+2      	; 0x1b6 <main+0x126>
 1b4:	fa c0       	rjmp	.+500    	; 0x3aa <main+0x31a>
		__ticks = 1;
	else if (__tmp > 65535)
 1b6:	c8 01       	movw	r24, r16
 1b8:	b7 01       	movw	r22, r14
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	3f ef       	ldi	r19, 0xFF	; 255
 1be:	4f e7       	ldi	r20, 0x7F	; 127
 1c0:	57 e4       	ldi	r21, 0x47	; 71
 1c2:	0e 94 b8 02 	call	0x570	; 0x570 <__gesf2>
 1c6:	18 16       	cp	r1, r24
 1c8:	0c f0       	brlt	.+2      	; 0x1cc <main+0x13c>
 1ca:	10 c1       	rjmp	.+544    	; 0x3ec <main+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1cc:	c6 01       	movw	r24, r12
 1ce:	b5 01       	movw	r22, r10
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e2       	ldi	r20, 0x20	; 32
 1d6:	51 e4       	ldi	r21, 0x41	; 65
 1d8:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 1dc:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <main+0x15c>
 1e2:	c4 01       	movw	r24, r8
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0x154>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e8:	61 50       	subi	r22, 0x01	; 1
 1ea:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ec:	61 15       	cp	r22, r1
 1ee:	71 05       	cpc	r23, r1
 1f0:	c1 f7       	brne	.-16     	; 0x1e2 <main+0x152>
 1f2:	6e cf       	rjmp	.-292    	; 0xd0 <main+0x40>
unsigned int TOFF1;
unsigned int TOFF2;
while(1)
{
p=read_adc(0);
a=(p/40);
 1f4:	c8 01       	movw	r24, r16
 1f6:	68 e2       	ldi	r22, 0x28	; 40
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	0e 94 47 03 	call	0x68e	; 0x68e <__udivmodhi4>
 1fe:	eb 01       	movw	r28, r22
PORTB=0b00000000;
_delay_ms(TOFF2);
}
else if(p<752)
{
PORTB=0b00000110;
 200:	78 ba       	out	0x18, r7	; 24
_delay_ms(TON1);
 202:	b4 01       	movw	r22, r8
 204:	6c 1b       	sub	r22, r28
 206:	7d 0b       	sbc	r23, r29
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 2e 02 	call	0x45c	; 0x45c <__floatunsisf>
 210:	5b 01       	movw	r10, r22
 212:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	4a e7       	ldi	r20, 0x7A	; 122
 21a:	53 e4       	ldi	r21, 0x43	; 67
 21c:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 220:	7b 01       	movw	r14, r22
 222:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	40 e8       	ldi	r20, 0x80	; 128
 22a:	5f e3       	ldi	r21, 0x3F	; 63
 22c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__cmpsf2>
 230:	88 23       	and	r24, r24
 232:	1c f4       	brge	.+6      	; 0x23a <main+0x1aa>
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	22 c0       	rjmp	.+68     	; 0x27e <main+0x1ee>
		__ticks = 1;
	else if (__tmp > 65535)
 23a:	c8 01       	movw	r24, r16
 23c:	b7 01       	movw	r22, r14
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	3f ef       	ldi	r19, 0xFF	; 255
 242:	4f e7       	ldi	r20, 0x7F	; 127
 244:	57 e4       	ldi	r21, 0x47	; 71
 246:	0e 94 b8 02 	call	0x570	; 0x570 <__gesf2>
 24a:	18 16       	cp	r1, r24
 24c:	a4 f4       	brge	.+40     	; 0x276 <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 24e:	c6 01       	movw	r24, r12
 250:	b5 01       	movw	r22, r10
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	40 e2       	ldi	r20, 0x20	; 32
 258:	51 e4       	ldi	r21, 0x41	; 65
 25a:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 25e:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 262:	05 c0       	rjmp	.+10     	; 0x26e <main+0x1de>
 264:	c4 01       	movw	r24, r8
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0x1d6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26a:	61 50       	subi	r22, 0x01	; 1
 26c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26e:	61 15       	cp	r22, r1
 270:	71 05       	cpc	r23, r1
 272:	c1 f7       	brne	.-16     	; 0x264 <main+0x1d4>
 274:	07 c0       	rjmp	.+14     	; 0x284 <main+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 276:	c8 01       	movw	r24, r16
 278:	b7 01       	movw	r22, r14
 27a:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 27e:	cb 01       	movw	r24, r22
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0x1f0>
PORTB=0b00000000;
 284:	18 ba       	out	0x18, r1	; 24
_delay_ms(TOFF1);
 286:	be 01       	movw	r22, r28
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 2e 02 	call	0x45c	; 0x45c <__floatunsisf>
 290:	5b 01       	movw	r10, r22
 292:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	4a e7       	ldi	r20, 0x7A	; 122
 29a:	53 e4       	ldi	r21, 0x43	; 67
 29c:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 2a0:	7b 01       	movw	r14, r22
 2a2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 e8       	ldi	r20, 0x80	; 128
 2aa:	5f e3       	ldi	r21, 0x3F	; 63
 2ac:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__cmpsf2>
 2b0:	88 23       	and	r24, r24
 2b2:	0c f4       	brge	.+2      	; 0x2b6 <main+0x226>
 2b4:	7a c0       	rjmp	.+244    	; 0x3aa <main+0x31a>
		__ticks = 1;
	else if (__tmp > 65535)
 2b6:	c8 01       	movw	r24, r16
 2b8:	b7 01       	movw	r22, r14
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	3f ef       	ldi	r19, 0xFF	; 255
 2be:	4f e7       	ldi	r20, 0x7F	; 127
 2c0:	57 e4       	ldi	r21, 0x47	; 71
 2c2:	0e 94 b8 02 	call	0x570	; 0x570 <__gesf2>
 2c6:	18 16       	cp	r1, r24
 2c8:	0c f0       	brlt	.+2      	; 0x2cc <main+0x23c>
 2ca:	90 c0       	rjmp	.+288    	; 0x3ec <main+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2cc:	c6 01       	movw	r24, r12
 2ce:	b5 01       	movw	r22, r10
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e2       	ldi	r20, 0x20	; 32
 2d6:	51 e4       	ldi	r21, 0x41	; 65
 2d8:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 2dc:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <main+0x25c>
 2e2:	c4 01       	movw	r24, r8
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0x254>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e8:	61 50       	subi	r22, 0x01	; 1
 2ea:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ec:	61 15       	cp	r22, r1
 2ee:	71 05       	cpc	r23, r1
 2f0:	c1 f7       	brne	.-16     	; 0x2e2 <main+0x252>
 2f2:	ee ce       	rjmp	.-548    	; 0xd0 <main+0x40>
}
else if(q<752)
 2f4:	20 5f       	subi	r18, 0xF0	; 240
 2f6:	32 40       	sbci	r19, 0x02	; 2
 2f8:	08 f0       	brcs	.+2      	; 0x2fc <main+0x26c>
 2fa:	ea ce       	rjmp	.-556    	; 0xd0 <main+0x40>
{
PORTB=0b00001001;
 2fc:	58 ba       	out	0x18, r5	; 24
_delay_ms(TON2);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 2e 02 	call	0x45c	; 0x45c <__floatunsisf>
 306:	5b 01       	movw	r10, r22
 308:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	4a e7       	ldi	r20, 0x7A	; 122
 310:	53 e4       	ldi	r21, 0x43	; 67
 312:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 316:	7b 01       	movw	r14, r22
 318:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e8       	ldi	r20, 0x80	; 128
 320:	5f e3       	ldi	r21, 0x3F	; 63
 322:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__cmpsf2>
 326:	88 23       	and	r24, r24
 328:	1c f4       	brge	.+6      	; 0x330 <main+0x2a0>
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	22 c0       	rjmp	.+68     	; 0x374 <main+0x2e4>
		__ticks = 1;
	else if (__tmp > 65535)
 330:	c8 01       	movw	r24, r16
 332:	b7 01       	movw	r22, r14
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	3f ef       	ldi	r19, 0xFF	; 255
 338:	4f e7       	ldi	r20, 0x7F	; 127
 33a:	57 e4       	ldi	r21, 0x47	; 71
 33c:	0e 94 b8 02 	call	0x570	; 0x570 <__gesf2>
 340:	18 16       	cp	r1, r24
 342:	a4 f4       	brge	.+40     	; 0x36c <main+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 344:	c6 01       	movw	r24, r12
 346:	b5 01       	movw	r22, r10
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	40 e2       	ldi	r20, 0x20	; 32
 34e:	51 e4       	ldi	r21, 0x41	; 65
 350:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 354:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 358:	05 c0       	rjmp	.+10     	; 0x364 <main+0x2d4>
 35a:	c4 01       	movw	r24, r8
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <main+0x2cc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 360:	61 50       	subi	r22, 0x01	; 1
 362:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 364:	61 15       	cp	r22, r1
 366:	71 05       	cpc	r23, r1
 368:	c1 f7       	brne	.-16     	; 0x35a <main+0x2ca>
 36a:	07 c0       	rjmp	.+14     	; 0x37a <main+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 36c:	c8 01       	movw	r24, r16
 36e:	b7 01       	movw	r22, r14
 370:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 374:	cb 01       	movw	r24, r22
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <main+0x2e6>
PORTB=0b00000000;
 37a:	18 ba       	out	0x18, r1	; 24
_delay_ms(TOFF2);
 37c:	be 01       	movw	r22, r28
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 2e 02 	call	0x45c	; 0x45c <__floatunsisf>
 386:	5b 01       	movw	r10, r22
 388:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	4a e7       	ldi	r20, 0x7A	; 122
 390:	53 e4       	ldi	r21, 0x43	; 67
 392:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 396:	7b 01       	movw	r14, r22
 398:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	40 e8       	ldi	r20, 0x80	; 128
 3a0:	5f e3       	ldi	r21, 0x3F	; 63
 3a2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__cmpsf2>
 3a6:	88 23       	and	r24, r24
 3a8:	1c f4       	brge	.+6      	; 0x3b0 <main+0x320>
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	22 c0       	rjmp	.+68     	; 0x3f4 <main+0x364>
		__ticks = 1;
	else if (__tmp > 65535)
 3b0:	c8 01       	movw	r24, r16
 3b2:	b7 01       	movw	r22, r14
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	3f ef       	ldi	r19, 0xFF	; 255
 3b8:	4f e7       	ldi	r20, 0x7F	; 127
 3ba:	57 e4       	ldi	r21, 0x47	; 71
 3bc:	0e 94 b8 02 	call	0x570	; 0x570 <__gesf2>
 3c0:	18 16       	cp	r1, r24
 3c2:	a4 f4       	brge	.+40     	; 0x3ec <main+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3c4:	c6 01       	movw	r24, r12
 3c6:	b5 01       	movw	r22, r10
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	40 e2       	ldi	r20, 0x20	; 32
 3ce:	51 e4       	ldi	r21, 0x41	; 65
 3d0:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3>
 3d4:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <main+0x354>
 3da:	c4 01       	movw	r24, r8
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <main+0x34c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e0:	61 50       	subi	r22, 0x01	; 1
 3e2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3e4:	61 15       	cp	r22, r1
 3e6:	71 05       	cpc	r23, r1
 3e8:	c1 f7       	brne	.-16     	; 0x3da <main+0x34a>
 3ea:	72 ce       	rjmp	.-796    	; 0xd0 <main+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3ec:	c8 01       	movw	r24, r16
 3ee:	b7 01       	movw	r22, r14
 3f0:	0e 94 02 02 	call	0x404	; 0x404 <__fixunssfsi>
 3f4:	cb 01       	movw	r24, r22
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <main+0x366>
 3fa:	6a ce       	rjmp	.-812    	; 0xd0 <main+0x40>

000003fc <__cmpsf2>:
 3fc:	6c d0       	rcall	.+216    	; 0x4d6 <__fp_cmp>
 3fe:	08 f4       	brcc	.+2      	; 0x402 <__cmpsf2+0x6>
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret

00000404 <__fixunssfsi>:
 404:	94 d0       	rcall	.+296    	; 0x52e <__fp_splitA>
 406:	88 f0       	brcs	.+34     	; 0x42a <__fixunssfsi+0x26>
 408:	9f 57       	subi	r25, 0x7F	; 127
 40a:	90 f0       	brcs	.+36     	; 0x430 <__fixunssfsi+0x2c>
 40c:	b9 2f       	mov	r27, r25
 40e:	99 27       	eor	r25, r25
 410:	b7 51       	subi	r27, 0x17	; 23
 412:	a0 f0       	brcs	.+40     	; 0x43c <__fixunssfsi+0x38>
 414:	d1 f0       	breq	.+52     	; 0x44a <__fixunssfsi+0x46>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	1a f0       	brmi	.+6      	; 0x426 <__fixunssfsi+0x22>
 420:	ba 95       	dec	r27
 422:	c9 f7       	brne	.-14     	; 0x416 <__fixunssfsi+0x12>
 424:	12 c0       	rjmp	.+36     	; 0x44a <__fixunssfsi+0x46>
 426:	b1 30       	cpi	r27, 0x01	; 1
 428:	81 f0       	breq	.+32     	; 0x44a <__fixunssfsi+0x46>
 42a:	9b d0       	rcall	.+310    	; 0x562 <__fp_zero>
 42c:	b1 e0       	ldi	r27, 0x01	; 1
 42e:	08 95       	ret
 430:	98 c0       	rjmp	.+304    	; 0x562 <__fp_zero>
 432:	67 2f       	mov	r22, r23
 434:	78 2f       	mov	r23, r24
 436:	88 27       	eor	r24, r24
 438:	b8 5f       	subi	r27, 0xF8	; 248
 43a:	39 f0       	breq	.+14     	; 0x44a <__fixunssfsi+0x46>
 43c:	b9 3f       	cpi	r27, 0xF9	; 249
 43e:	cc f3       	brlt	.-14     	; 0x432 <__fixunssfsi+0x2e>
 440:	86 95       	lsr	r24
 442:	77 95       	ror	r23
 444:	67 95       	ror	r22
 446:	b3 95       	inc	r27
 448:	d9 f7       	brne	.-10     	; 0x440 <__fixunssfsi+0x3c>
 44a:	3e f4       	brtc	.+14     	; 0x45a <__fixunssfsi+0x56>
 44c:	90 95       	com	r25
 44e:	80 95       	com	r24
 450:	70 95       	com	r23
 452:	61 95       	neg	r22
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f 4f       	sbci	r24, 0xFF	; 255
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	08 95       	ret

0000045c <__floatunsisf>:
 45c:	e8 94       	clt
 45e:	09 c0       	rjmp	.+18     	; 0x472 <__floatsisf+0x12>

00000460 <__floatsisf>:
 460:	97 fb       	bst	r25, 7
 462:	3e f4       	brtc	.+14     	; 0x472 <__floatsisf+0x12>
 464:	90 95       	com	r25
 466:	80 95       	com	r24
 468:	70 95       	com	r23
 46a:	61 95       	neg	r22
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	8f 4f       	sbci	r24, 0xFF	; 255
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	99 23       	and	r25, r25
 474:	a9 f0       	breq	.+42     	; 0x4a0 <__floatsisf+0x40>
 476:	f9 2f       	mov	r31, r25
 478:	96 e9       	ldi	r25, 0x96	; 150
 47a:	bb 27       	eor	r27, r27
 47c:	93 95       	inc	r25
 47e:	f6 95       	lsr	r31
 480:	87 95       	ror	r24
 482:	77 95       	ror	r23
 484:	67 95       	ror	r22
 486:	b7 95       	ror	r27
 488:	f1 11       	cpse	r31, r1
 48a:	f8 cf       	rjmp	.-16     	; 0x47c <__floatsisf+0x1c>
 48c:	fa f4       	brpl	.+62     	; 0x4cc <__floatsisf+0x6c>
 48e:	bb 0f       	add	r27, r27
 490:	11 f4       	brne	.+4      	; 0x496 <__floatsisf+0x36>
 492:	60 ff       	sbrs	r22, 0
 494:	1b c0       	rjmp	.+54     	; 0x4cc <__floatsisf+0x6c>
 496:	6f 5f       	subi	r22, 0xFF	; 255
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	16 c0       	rjmp	.+44     	; 0x4cc <__floatsisf+0x6c>
 4a0:	88 23       	and	r24, r24
 4a2:	11 f0       	breq	.+4      	; 0x4a8 <__floatsisf+0x48>
 4a4:	96 e9       	ldi	r25, 0x96	; 150
 4a6:	11 c0       	rjmp	.+34     	; 0x4ca <__floatsisf+0x6a>
 4a8:	77 23       	and	r23, r23
 4aa:	21 f0       	breq	.+8      	; 0x4b4 <__floatsisf+0x54>
 4ac:	9e e8       	ldi	r25, 0x8E	; 142
 4ae:	87 2f       	mov	r24, r23
 4b0:	76 2f       	mov	r23, r22
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <__floatsisf+0x5e>
 4b4:	66 23       	and	r22, r22
 4b6:	71 f0       	breq	.+28     	; 0x4d4 <__floatsisf+0x74>
 4b8:	96 e8       	ldi	r25, 0x86	; 134
 4ba:	86 2f       	mov	r24, r22
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	2a f0       	brmi	.+10     	; 0x4cc <__floatsisf+0x6c>
 4c2:	9a 95       	dec	r25
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	da f7       	brpl	.-10     	; 0x4c2 <__floatsisf+0x62>
 4cc:	88 0f       	add	r24, r24
 4ce:	96 95       	lsr	r25
 4d0:	87 95       	ror	r24
 4d2:	97 f9       	bld	r25, 7
 4d4:	08 95       	ret

000004d6 <__fp_cmp>:
 4d6:	99 0f       	add	r25, r25
 4d8:	00 08       	sbc	r0, r0
 4da:	55 0f       	add	r21, r21
 4dc:	aa 0b       	sbc	r26, r26
 4de:	e0 e8       	ldi	r30, 0x80	; 128
 4e0:	fe ef       	ldi	r31, 0xFE	; 254
 4e2:	16 16       	cp	r1, r22
 4e4:	17 06       	cpc	r1, r23
 4e6:	e8 07       	cpc	r30, r24
 4e8:	f9 07       	cpc	r31, r25
 4ea:	c0 f0       	brcs	.+48     	; 0x51c <__fp_cmp+0x46>
 4ec:	12 16       	cp	r1, r18
 4ee:	13 06       	cpc	r1, r19
 4f0:	e4 07       	cpc	r30, r20
 4f2:	f5 07       	cpc	r31, r21
 4f4:	98 f0       	brcs	.+38     	; 0x51c <__fp_cmp+0x46>
 4f6:	62 1b       	sub	r22, r18
 4f8:	73 0b       	sbc	r23, r19
 4fa:	84 0b       	sbc	r24, r20
 4fc:	95 0b       	sbc	r25, r21
 4fe:	39 f4       	brne	.+14     	; 0x50e <__fp_cmp+0x38>
 500:	0a 26       	eor	r0, r26
 502:	61 f0       	breq	.+24     	; 0x51c <__fp_cmp+0x46>
 504:	23 2b       	or	r18, r19
 506:	24 2b       	or	r18, r20
 508:	25 2b       	or	r18, r21
 50a:	21 f4       	brne	.+8      	; 0x514 <__fp_cmp+0x3e>
 50c:	08 95       	ret
 50e:	0a 26       	eor	r0, r26
 510:	09 f4       	brne	.+2      	; 0x514 <__fp_cmp+0x3e>
 512:	a1 40       	sbci	r26, 0x01	; 1
 514:	a6 95       	lsr	r26
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	81 1d       	adc	r24, r1
 51a:	81 1d       	adc	r24, r1
 51c:	08 95       	ret

0000051e <__fp_split3>:
 51e:	57 fd       	sbrc	r21, 7
 520:	90 58       	subi	r25, 0x80	; 128
 522:	44 0f       	add	r20, r20
 524:	55 1f       	adc	r21, r21
 526:	59 f0       	breq	.+22     	; 0x53e <__fp_splitA+0x10>
 528:	5f 3f       	cpi	r21, 0xFF	; 255
 52a:	71 f0       	breq	.+28     	; 0x548 <__fp_splitA+0x1a>
 52c:	47 95       	ror	r20

0000052e <__fp_splitA>:
 52e:	88 0f       	add	r24, r24
 530:	97 fb       	bst	r25, 7
 532:	99 1f       	adc	r25, r25
 534:	61 f0       	breq	.+24     	; 0x54e <__fp_splitA+0x20>
 536:	9f 3f       	cpi	r25, 0xFF	; 255
 538:	79 f0       	breq	.+30     	; 0x558 <__fp_splitA+0x2a>
 53a:	87 95       	ror	r24
 53c:	08 95       	ret
 53e:	12 16       	cp	r1, r18
 540:	13 06       	cpc	r1, r19
 542:	14 06       	cpc	r1, r20
 544:	55 1f       	adc	r21, r21
 546:	f2 cf       	rjmp	.-28     	; 0x52c <__fp_split3+0xe>
 548:	46 95       	lsr	r20
 54a:	f1 df       	rcall	.-30     	; 0x52e <__fp_splitA>
 54c:	08 c0       	rjmp	.+16     	; 0x55e <__fp_splitA+0x30>
 54e:	16 16       	cp	r1, r22
 550:	17 06       	cpc	r1, r23
 552:	18 06       	cpc	r1, r24
 554:	99 1f       	adc	r25, r25
 556:	f1 cf       	rjmp	.-30     	; 0x53a <__fp_splitA+0xc>
 558:	86 95       	lsr	r24
 55a:	71 05       	cpc	r23, r1
 55c:	61 05       	cpc	r22, r1
 55e:	08 94       	sec
 560:	08 95       	ret

00000562 <__fp_zero>:
 562:	e8 94       	clt

00000564 <__fp_szero>:
 564:	bb 27       	eor	r27, r27
 566:	66 27       	eor	r22, r22
 568:	77 27       	eor	r23, r23
 56a:	cb 01       	movw	r24, r22
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__gesf2>:
 570:	b2 df       	rcall	.-156    	; 0x4d6 <__fp_cmp>
 572:	08 f4       	brcc	.+2      	; 0x576 <__gesf2+0x6>
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	08 95       	ret

00000578 <__mulsf3>:
 578:	0b d0       	rcall	.+22     	; 0x590 <__mulsf3x>
 57a:	78 c0       	rjmp	.+240    	; 0x66c <__fp_round>
 57c:	69 d0       	rcall	.+210    	; 0x650 <__fp_pscA>
 57e:	28 f0       	brcs	.+10     	; 0x58a <__mulsf3+0x12>
 580:	6e d0       	rcall	.+220    	; 0x65e <__fp_pscB>
 582:	18 f0       	brcs	.+6      	; 0x58a <__mulsf3+0x12>
 584:	95 23       	and	r25, r21
 586:	09 f0       	breq	.+2      	; 0x58a <__mulsf3+0x12>
 588:	5a c0       	rjmp	.+180    	; 0x63e <__fp_inf>
 58a:	5f c0       	rjmp	.+190    	; 0x64a <__fp_nan>
 58c:	11 24       	eor	r1, r1
 58e:	ea cf       	rjmp	.-44     	; 0x564 <__fp_szero>

00000590 <__mulsf3x>:
 590:	c6 df       	rcall	.-116    	; 0x51e <__fp_split3>
 592:	a0 f3       	brcs	.-24     	; 0x57c <__mulsf3+0x4>

00000594 <__mulsf3_pse>:
 594:	95 9f       	mul	r25, r21
 596:	d1 f3       	breq	.-12     	; 0x58c <__mulsf3+0x14>
 598:	95 0f       	add	r25, r21
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	55 1f       	adc	r21, r21
 59e:	62 9f       	mul	r22, r18
 5a0:	f0 01       	movw	r30, r0
 5a2:	72 9f       	mul	r23, r18
 5a4:	bb 27       	eor	r27, r27
 5a6:	f0 0d       	add	r31, r0
 5a8:	b1 1d       	adc	r27, r1
 5aa:	63 9f       	mul	r22, r19
 5ac:	aa 27       	eor	r26, r26
 5ae:	f0 0d       	add	r31, r0
 5b0:	b1 1d       	adc	r27, r1
 5b2:	aa 1f       	adc	r26, r26
 5b4:	64 9f       	mul	r22, r20
 5b6:	66 27       	eor	r22, r22
 5b8:	b0 0d       	add	r27, r0
 5ba:	a1 1d       	adc	r26, r1
 5bc:	66 1f       	adc	r22, r22
 5be:	82 9f       	mul	r24, r18
 5c0:	22 27       	eor	r18, r18
 5c2:	b0 0d       	add	r27, r0
 5c4:	a1 1d       	adc	r26, r1
 5c6:	62 1f       	adc	r22, r18
 5c8:	73 9f       	mul	r23, r19
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	62 1f       	adc	r22, r18
 5d0:	83 9f       	mul	r24, r19
 5d2:	a0 0d       	add	r26, r0
 5d4:	61 1d       	adc	r22, r1
 5d6:	22 1f       	adc	r18, r18
 5d8:	74 9f       	mul	r23, r20
 5da:	33 27       	eor	r19, r19
 5dc:	a0 0d       	add	r26, r0
 5de:	61 1d       	adc	r22, r1
 5e0:	23 1f       	adc	r18, r19
 5e2:	84 9f       	mul	r24, r20
 5e4:	60 0d       	add	r22, r0
 5e6:	21 1d       	adc	r18, r1
 5e8:	82 2f       	mov	r24, r18
 5ea:	76 2f       	mov	r23, r22
 5ec:	6a 2f       	mov	r22, r26
 5ee:	11 24       	eor	r1, r1
 5f0:	9f 57       	subi	r25, 0x7F	; 127
 5f2:	50 40       	sbci	r21, 0x00	; 0
 5f4:	8a f0       	brmi	.+34     	; 0x618 <__mulsf3_pse+0x84>
 5f6:	e1 f0       	breq	.+56     	; 0x630 <__mulsf3_pse+0x9c>
 5f8:	88 23       	and	r24, r24
 5fa:	4a f0       	brmi	.+18     	; 0x60e <__mulsf3_pse+0x7a>
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	bb 1f       	adc	r27, r27
 602:	66 1f       	adc	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	a9 f7       	brne	.-22     	; 0x5f8 <__mulsf3_pse+0x64>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	70 f0       	brcs	.+28     	; 0x630 <__mulsf3_pse+0x9c>
 614:	14 c0       	rjmp	.+40     	; 0x63e <__fp_inf>
 616:	a6 cf       	rjmp	.-180    	; 0x564 <__fp_szero>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	ec f3       	brlt	.-6      	; 0x616 <__mulsf3_pse+0x82>
 61c:	98 3e       	cpi	r25, 0xE8	; 232
 61e:	dc f3       	brlt	.-10     	; 0x616 <__mulsf3_pse+0x82>
 620:	86 95       	lsr	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f7 95       	ror	r31
 62a:	e7 95       	ror	r30
 62c:	9f 5f       	subi	r25, 0xFF	; 255
 62e:	c1 f7       	brne	.-16     	; 0x620 <__mulsf3_pse+0x8c>
 630:	fe 2b       	or	r31, r30
 632:	88 0f       	add	r24, r24
 634:	91 1d       	adc	r25, r1
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret

0000063e <__fp_inf>:
 63e:	97 f9       	bld	r25, 7
 640:	9f 67       	ori	r25, 0x7F	; 127
 642:	80 e8       	ldi	r24, 0x80	; 128
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	08 95       	ret

0000064a <__fp_nan>:
 64a:	9f ef       	ldi	r25, 0xFF	; 255
 64c:	80 ec       	ldi	r24, 0xC0	; 192
 64e:	08 95       	ret

00000650 <__fp_pscA>:
 650:	00 24       	eor	r0, r0
 652:	0a 94       	dec	r0
 654:	16 16       	cp	r1, r22
 656:	17 06       	cpc	r1, r23
 658:	18 06       	cpc	r1, r24
 65a:	09 06       	cpc	r0, r25
 65c:	08 95       	ret

0000065e <__fp_pscB>:
 65e:	00 24       	eor	r0, r0
 660:	0a 94       	dec	r0
 662:	12 16       	cp	r1, r18
 664:	13 06       	cpc	r1, r19
 666:	14 06       	cpc	r1, r20
 668:	05 06       	cpc	r0, r21
 66a:	08 95       	ret

0000066c <__fp_round>:
 66c:	09 2e       	mov	r0, r25
 66e:	03 94       	inc	r0
 670:	00 0c       	add	r0, r0
 672:	11 f4       	brne	.+4      	; 0x678 <__fp_round+0xc>
 674:	88 23       	and	r24, r24
 676:	52 f0       	brmi	.+20     	; 0x68c <__fp_round+0x20>
 678:	bb 0f       	add	r27, r27
 67a:	40 f4       	brcc	.+16     	; 0x68c <__fp_round+0x20>
 67c:	bf 2b       	or	r27, r31
 67e:	11 f4       	brne	.+4      	; 0x684 <__fp_round+0x18>
 680:	60 ff       	sbrs	r22, 0
 682:	04 c0       	rjmp	.+8      	; 0x68c <__fp_round+0x20>
 684:	6f 5f       	subi	r22, 0xFF	; 255
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	8f 4f       	sbci	r24, 0xFF	; 255
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	08 95       	ret

0000068e <__udivmodhi4>:
 68e:	aa 1b       	sub	r26, r26
 690:	bb 1b       	sub	r27, r27
 692:	51 e1       	ldi	r21, 0x11	; 17
 694:	07 c0       	rjmp	.+14     	; 0x6a4 <__udivmodhi4_ep>

00000696 <__udivmodhi4_loop>:
 696:	aa 1f       	adc	r26, r26
 698:	bb 1f       	adc	r27, r27
 69a:	a6 17       	cp	r26, r22
 69c:	b7 07       	cpc	r27, r23
 69e:	10 f0       	brcs	.+4      	; 0x6a4 <__udivmodhi4_ep>
 6a0:	a6 1b       	sub	r26, r22
 6a2:	b7 0b       	sbc	r27, r23

000006a4 <__udivmodhi4_ep>:
 6a4:	88 1f       	adc	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	5a 95       	dec	r21
 6aa:	a9 f7       	brne	.-22     	; 0x696 <__udivmodhi4_loop>
 6ac:	80 95       	com	r24
 6ae:	90 95       	com	r25
 6b0:	bc 01       	movw	r22, r24
 6b2:	cd 01       	movw	r24, r26
 6b4:	08 95       	ret

000006b6 <_exit>:
 6b6:	f8 94       	cli

000006b8 <__stop_program>:
 6b8:	ff cf       	rjmp	.-2      	; 0x6b8 <__stop_program>
