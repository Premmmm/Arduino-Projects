
ldr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000241  00000000  00000000  00000543  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011a  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000252  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d8  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000018e  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 4b 02 	jmp	0x496	; 0x496 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_adc>:
#include<avr/io.h>
#include<util/delay.h>

void init_adc()
{
ADCSRA|=0b00000001<<ADEN;
  6c:	37 9a       	sbi	0x06, 7	; 6
ADCSRA|=0b00000001<<ADPS2;
  6e:	32 9a       	sbi	0x06, 2	; 6
ADMUX|=0b00000001<<REFS0;
  70:	3e 9a       	sbi	0x07, 6	; 7
}
  72:	08 95       	ret

00000074 <read_adc>:

unsigned int read_adc(int p)
{
ADMUX&=0b01000000;
  74:	97 b1       	in	r25, 0x07	; 7
  76:	90 74       	andi	r25, 0x40	; 64
  78:	97 b9       	out	0x07, r25	; 7
ADMUX|=p;
  7a:	97 b1       	in	r25, 0x07	; 7
  7c:	98 2b       	or	r25, r24
  7e:	97 b9       	out	0x07, r25	; 7
ADCSRA|=0b00000001<<ADSC;
  80:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&(0b00000001<<ADIF))==0)
  82:	34 9b       	sbis	0x06, 4	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <read_adc+0xe>
{}
ADCSRA|=0b00000001<<ADIF;
  86:	34 9a       	sbi	0x06, 4	; 6
return(ADC);
  88:	24 b1       	in	r18, 0x04	; 4
  8a:	35 b1       	in	r19, 0x05	; 5
}
  8c:	c9 01       	movw	r24, r18
  8e:	08 95       	ret

00000090 <main>:

void main()
{
  90:	7f 92       	push	r7
  92:	8f 92       	push	r8
  94:	9f 92       	push	r9
  96:	af 92       	push	r10
  98:	bf 92       	push	r11
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
DDRB=0b11111111;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 bb       	out	0x17, r24	; 23
init_adc();
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <init_adc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b2:	80 e5       	ldi	r24, 0x50	; 80
  b4:	93 ec       	ldi	r25, 0xC3	; 195
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x26>
T=25.6;
TOFF=a;
TON=T-TOFF;
if(p=922)
{
PORTB=0b00001010;
  ba:	9a e0       	ldi	r25, 0x0A	; 10
  bc:	79 2e       	mov	r7, r25
_delay_ms(TON);
  be:	89 e1       	ldi	r24, 0x19	; 25
  c0:	88 2e       	mov	r8, r24
  c2:	91 2c       	mov	r9, r1
unsigned int TON;
unsigned int TOFF;

while(1)
{
p=read_adc(0);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc>
a=(p/40);
  cc:	68 e2       	ldi	r22, 0x28	; 40
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	0e 94 37 02 	call	0x46e	; 0x46e <__udivmodhi4>
  d4:	eb 01       	movw	r28, r22
T=25.6;
TOFF=a;
TON=T-TOFF;
if(p=922)
{
PORTB=0b00001010;
  d6:	78 ba       	out	0x18, r7	; 24
_delay_ms(TON);
  d8:	b4 01       	movw	r22, r8
  da:	6c 1b       	sub	r22, r28
  dc:	7d 0b       	sbc	r23, r29
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 1e 01 	call	0x23c	; 0x23c <__floatunsisf>
  e6:	5b 01       	movw	r10, r22
  e8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	4a e7       	ldi	r20, 0x7A	; 122
  f0:	53 e4       	ldi	r21, 0x43	; 67
  f2:	0e 94 ac 01 	call	0x358	; 0x358 <__mulsf3>
  f6:	7b 01       	movw	r14, r22
  f8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 e8       	ldi	r20, 0x80	; 128
 100:	5f e3       	ldi	r21, 0x3F	; 63
 102:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__cmpsf2>
 106:	88 23       	and	r24, r24
 108:	1c f4       	brge	.+6      	; 0x110 <main+0x80>
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	22 c0       	rjmp	.+68     	; 0x154 <main+0xc4>
		__ticks = 1;
	else if (__tmp > 65535)
 110:	c8 01       	movw	r24, r16
 112:	b7 01       	movw	r22, r14
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	3f ef       	ldi	r19, 0xFF	; 255
 118:	4f e7       	ldi	r20, 0x7F	; 127
 11a:	57 e4       	ldi	r21, 0x47	; 71
 11c:	0e 94 a8 01 	call	0x350	; 0x350 <__gesf2>
 120:	18 16       	cp	r1, r24
 122:	a4 f4       	brge	.+40     	; 0x14c <main+0xbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 124:	c6 01       	movw	r24, r12
 126:	b5 01       	movw	r22, r10
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	40 e2       	ldi	r20, 0x20	; 32
 12e:	51 e4       	ldi	r21, 0x41	; 65
 130:	0e 94 ac 01 	call	0x358	; 0x358 <__mulsf3>
 134:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__fixunssfsi>
 138:	05 c0       	rjmp	.+10     	; 0x144 <main+0xb4>
 13a:	c4 01       	movw	r24, r8
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0xac>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 140:	61 50       	subi	r22, 0x01	; 1
 142:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	61 15       	cp	r22, r1
 146:	71 05       	cpc	r23, r1
 148:	c1 f7       	brne	.-16     	; 0x13a <main+0xaa>
 14a:	07 c0       	rjmp	.+14     	; 0x15a <main+0xca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 14c:	c8 01       	movw	r24, r16
 14e:	b7 01       	movw	r22, r14
 150:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__fixunssfsi>
 154:	cb 01       	movw	r24, r22
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0xc6>
PORTB=0b00000000;
 15a:	18 ba       	out	0x18, r1	; 24
_delay_ms(TOFF);
 15c:	be 01       	movw	r22, r28
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 1e 01 	call	0x23c	; 0x23c <__floatunsisf>
 166:	5b 01       	movw	r10, r22
 168:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	4a e7       	ldi	r20, 0x7A	; 122
 170:	53 e4       	ldi	r21, 0x43	; 67
 172:	0e 94 ac 01 	call	0x358	; 0x358 <__mulsf3>
 176:	7b 01       	movw	r14, r22
 178:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	40 e8       	ldi	r20, 0x80	; 128
 180:	5f e3       	ldi	r21, 0x3F	; 63
 182:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__cmpsf2>
 186:	88 23       	and	r24, r24
 188:	1c f4       	brge	.+6      	; 0x190 <main+0x100>
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	22 c0       	rjmp	.+68     	; 0x1d4 <main+0x144>
		__ticks = 1;
	else if (__tmp > 65535)
 190:	c8 01       	movw	r24, r16
 192:	b7 01       	movw	r22, r14
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	3f ef       	ldi	r19, 0xFF	; 255
 198:	4f e7       	ldi	r20, 0x7F	; 127
 19a:	57 e4       	ldi	r21, 0x47	; 71
 19c:	0e 94 a8 01 	call	0x350	; 0x350 <__gesf2>
 1a0:	18 16       	cp	r1, r24
 1a2:	a4 f4       	brge	.+40     	; 0x1cc <main+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1a4:	c6 01       	movw	r24, r12
 1a6:	b5 01       	movw	r22, r10
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 e2       	ldi	r20, 0x20	; 32
 1ae:	51 e4       	ldi	r21, 0x41	; 65
 1b0:	0e 94 ac 01 	call	0x358	; 0x358 <__mulsf3>
 1b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__fixunssfsi>
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <main+0x134>
 1ba:	c4 01       	movw	r24, r8
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x12c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c0:	61 50       	subi	r22, 0x01	; 1
 1c2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c4:	61 15       	cp	r22, r1
 1c6:	71 05       	cpc	r23, r1
 1c8:	c1 f7       	brne	.-16     	; 0x1ba <main+0x12a>
 1ca:	7c cf       	rjmp	.-264    	; 0xc4 <main+0x34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1cc:	c8 01       	movw	r24, r16
 1ce:	b7 01       	movw	r22, r14
 1d0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__fixunssfsi>
 1d4:	cb 01       	movw	r24, r22
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x146>
 1da:	74 cf       	rjmp	.-280    	; 0xc4 <main+0x34>

000001dc <__cmpsf2>:
 1dc:	6c d0       	rcall	.+216    	; 0x2b6 <__fp_cmp>
 1de:	08 f4       	brcc	.+2      	; 0x1e2 <__cmpsf2+0x6>
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret

000001e4 <__fixunssfsi>:
 1e4:	94 d0       	rcall	.+296    	; 0x30e <__fp_splitA>
 1e6:	88 f0       	brcs	.+34     	; 0x20a <__fixunssfsi+0x26>
 1e8:	9f 57       	subi	r25, 0x7F	; 127
 1ea:	90 f0       	brcs	.+36     	; 0x210 <__fixunssfsi+0x2c>
 1ec:	b9 2f       	mov	r27, r25
 1ee:	99 27       	eor	r25, r25
 1f0:	b7 51       	subi	r27, 0x17	; 23
 1f2:	a0 f0       	brcs	.+40     	; 0x21c <__fixunssfsi+0x38>
 1f4:	d1 f0       	breq	.+52     	; 0x22a <__fixunssfsi+0x46>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	88 1f       	adc	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	1a f0       	brmi	.+6      	; 0x206 <__fixunssfsi+0x22>
 200:	ba 95       	dec	r27
 202:	c9 f7       	brne	.-14     	; 0x1f6 <__fixunssfsi+0x12>
 204:	12 c0       	rjmp	.+36     	; 0x22a <__fixunssfsi+0x46>
 206:	b1 30       	cpi	r27, 0x01	; 1
 208:	81 f0       	breq	.+32     	; 0x22a <__fixunssfsi+0x46>
 20a:	9b d0       	rcall	.+310    	; 0x342 <__fp_zero>
 20c:	b1 e0       	ldi	r27, 0x01	; 1
 20e:	08 95       	ret
 210:	98 c0       	rjmp	.+304    	; 0x342 <__fp_zero>
 212:	67 2f       	mov	r22, r23
 214:	78 2f       	mov	r23, r24
 216:	88 27       	eor	r24, r24
 218:	b8 5f       	subi	r27, 0xF8	; 248
 21a:	39 f0       	breq	.+14     	; 0x22a <__fixunssfsi+0x46>
 21c:	b9 3f       	cpi	r27, 0xF9	; 249
 21e:	cc f3       	brlt	.-14     	; 0x212 <__fixunssfsi+0x2e>
 220:	86 95       	lsr	r24
 222:	77 95       	ror	r23
 224:	67 95       	ror	r22
 226:	b3 95       	inc	r27
 228:	d9 f7       	brne	.-10     	; 0x220 <__fixunssfsi+0x3c>
 22a:	3e f4       	brtc	.+14     	; 0x23a <__fixunssfsi+0x56>
 22c:	90 95       	com	r25
 22e:	80 95       	com	r24
 230:	70 95       	com	r23
 232:	61 95       	neg	r22
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	8f 4f       	sbci	r24, 0xFF	; 255
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	08 95       	ret

0000023c <__floatunsisf>:
 23c:	e8 94       	clt
 23e:	09 c0       	rjmp	.+18     	; 0x252 <__floatsisf+0x12>

00000240 <__floatsisf>:
 240:	97 fb       	bst	r25, 7
 242:	3e f4       	brtc	.+14     	; 0x252 <__floatsisf+0x12>
 244:	90 95       	com	r25
 246:	80 95       	com	r24
 248:	70 95       	com	r23
 24a:	61 95       	neg	r22
 24c:	7f 4f       	sbci	r23, 0xFF	; 255
 24e:	8f 4f       	sbci	r24, 0xFF	; 255
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	99 23       	and	r25, r25
 254:	a9 f0       	breq	.+42     	; 0x280 <__floatsisf+0x40>
 256:	f9 2f       	mov	r31, r25
 258:	96 e9       	ldi	r25, 0x96	; 150
 25a:	bb 27       	eor	r27, r27
 25c:	93 95       	inc	r25
 25e:	f6 95       	lsr	r31
 260:	87 95       	ror	r24
 262:	77 95       	ror	r23
 264:	67 95       	ror	r22
 266:	b7 95       	ror	r27
 268:	f1 11       	cpse	r31, r1
 26a:	f8 cf       	rjmp	.-16     	; 0x25c <__floatsisf+0x1c>
 26c:	fa f4       	brpl	.+62     	; 0x2ac <__floatsisf+0x6c>
 26e:	bb 0f       	add	r27, r27
 270:	11 f4       	brne	.+4      	; 0x276 <__floatsisf+0x36>
 272:	60 ff       	sbrs	r22, 0
 274:	1b c0       	rjmp	.+54     	; 0x2ac <__floatsisf+0x6c>
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	8f 4f       	sbci	r24, 0xFF	; 255
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	16 c0       	rjmp	.+44     	; 0x2ac <__floatsisf+0x6c>
 280:	88 23       	and	r24, r24
 282:	11 f0       	breq	.+4      	; 0x288 <__floatsisf+0x48>
 284:	96 e9       	ldi	r25, 0x96	; 150
 286:	11 c0       	rjmp	.+34     	; 0x2aa <__floatsisf+0x6a>
 288:	77 23       	and	r23, r23
 28a:	21 f0       	breq	.+8      	; 0x294 <__floatsisf+0x54>
 28c:	9e e8       	ldi	r25, 0x8E	; 142
 28e:	87 2f       	mov	r24, r23
 290:	76 2f       	mov	r23, r22
 292:	05 c0       	rjmp	.+10     	; 0x29e <__floatsisf+0x5e>
 294:	66 23       	and	r22, r22
 296:	71 f0       	breq	.+28     	; 0x2b4 <__floatsisf+0x74>
 298:	96 e8       	ldi	r25, 0x86	; 134
 29a:	86 2f       	mov	r24, r22
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	2a f0       	brmi	.+10     	; 0x2ac <__floatsisf+0x6c>
 2a2:	9a 95       	dec	r25
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	88 1f       	adc	r24, r24
 2aa:	da f7       	brpl	.-10     	; 0x2a2 <__floatsisf+0x62>
 2ac:	88 0f       	add	r24, r24
 2ae:	96 95       	lsr	r25
 2b0:	87 95       	ror	r24
 2b2:	97 f9       	bld	r25, 7
 2b4:	08 95       	ret

000002b6 <__fp_cmp>:
 2b6:	99 0f       	add	r25, r25
 2b8:	00 08       	sbc	r0, r0
 2ba:	55 0f       	add	r21, r21
 2bc:	aa 0b       	sbc	r26, r26
 2be:	e0 e8       	ldi	r30, 0x80	; 128
 2c0:	fe ef       	ldi	r31, 0xFE	; 254
 2c2:	16 16       	cp	r1, r22
 2c4:	17 06       	cpc	r1, r23
 2c6:	e8 07       	cpc	r30, r24
 2c8:	f9 07       	cpc	r31, r25
 2ca:	c0 f0       	brcs	.+48     	; 0x2fc <__fp_cmp+0x46>
 2cc:	12 16       	cp	r1, r18
 2ce:	13 06       	cpc	r1, r19
 2d0:	e4 07       	cpc	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	98 f0       	brcs	.+38     	; 0x2fc <__fp_cmp+0x46>
 2d6:	62 1b       	sub	r22, r18
 2d8:	73 0b       	sbc	r23, r19
 2da:	84 0b       	sbc	r24, r20
 2dc:	95 0b       	sbc	r25, r21
 2de:	39 f4       	brne	.+14     	; 0x2ee <__fp_cmp+0x38>
 2e0:	0a 26       	eor	r0, r26
 2e2:	61 f0       	breq	.+24     	; 0x2fc <__fp_cmp+0x46>
 2e4:	23 2b       	or	r18, r19
 2e6:	24 2b       	or	r18, r20
 2e8:	25 2b       	or	r18, r21
 2ea:	21 f4       	brne	.+8      	; 0x2f4 <__fp_cmp+0x3e>
 2ec:	08 95       	ret
 2ee:	0a 26       	eor	r0, r26
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <__fp_cmp+0x3e>
 2f2:	a1 40       	sbci	r26, 0x01	; 1
 2f4:	a6 95       	lsr	r26
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	81 1d       	adc	r24, r1
 2fa:	81 1d       	adc	r24, r1
 2fc:	08 95       	ret

000002fe <__fp_split3>:
 2fe:	57 fd       	sbrc	r21, 7
 300:	90 58       	subi	r25, 0x80	; 128
 302:	44 0f       	add	r20, r20
 304:	55 1f       	adc	r21, r21
 306:	59 f0       	breq	.+22     	; 0x31e <__fp_splitA+0x10>
 308:	5f 3f       	cpi	r21, 0xFF	; 255
 30a:	71 f0       	breq	.+28     	; 0x328 <__fp_splitA+0x1a>
 30c:	47 95       	ror	r20

0000030e <__fp_splitA>:
 30e:	88 0f       	add	r24, r24
 310:	97 fb       	bst	r25, 7
 312:	99 1f       	adc	r25, r25
 314:	61 f0       	breq	.+24     	; 0x32e <__fp_splitA+0x20>
 316:	9f 3f       	cpi	r25, 0xFF	; 255
 318:	79 f0       	breq	.+30     	; 0x338 <__fp_splitA+0x2a>
 31a:	87 95       	ror	r24
 31c:	08 95       	ret
 31e:	12 16       	cp	r1, r18
 320:	13 06       	cpc	r1, r19
 322:	14 06       	cpc	r1, r20
 324:	55 1f       	adc	r21, r21
 326:	f2 cf       	rjmp	.-28     	; 0x30c <__fp_split3+0xe>
 328:	46 95       	lsr	r20
 32a:	f1 df       	rcall	.-30     	; 0x30e <__fp_splitA>
 32c:	08 c0       	rjmp	.+16     	; 0x33e <__fp_splitA+0x30>
 32e:	16 16       	cp	r1, r22
 330:	17 06       	cpc	r1, r23
 332:	18 06       	cpc	r1, r24
 334:	99 1f       	adc	r25, r25
 336:	f1 cf       	rjmp	.-30     	; 0x31a <__fp_splitA+0xc>
 338:	86 95       	lsr	r24
 33a:	71 05       	cpc	r23, r1
 33c:	61 05       	cpc	r22, r1
 33e:	08 94       	sec
 340:	08 95       	ret

00000342 <__fp_zero>:
 342:	e8 94       	clt

00000344 <__fp_szero>:
 344:	bb 27       	eor	r27, r27
 346:	66 27       	eor	r22, r22
 348:	77 27       	eor	r23, r23
 34a:	cb 01       	movw	r24, r22
 34c:	97 f9       	bld	r25, 7
 34e:	08 95       	ret

00000350 <__gesf2>:
 350:	b2 df       	rcall	.-156    	; 0x2b6 <__fp_cmp>
 352:	08 f4       	brcc	.+2      	; 0x356 <__gesf2+0x6>
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	08 95       	ret

00000358 <__mulsf3>:
 358:	0b d0       	rcall	.+22     	; 0x370 <__mulsf3x>
 35a:	78 c0       	rjmp	.+240    	; 0x44c <__fp_round>
 35c:	69 d0       	rcall	.+210    	; 0x430 <__fp_pscA>
 35e:	28 f0       	brcs	.+10     	; 0x36a <__mulsf3+0x12>
 360:	6e d0       	rcall	.+220    	; 0x43e <__fp_pscB>
 362:	18 f0       	brcs	.+6      	; 0x36a <__mulsf3+0x12>
 364:	95 23       	and	r25, r21
 366:	09 f0       	breq	.+2      	; 0x36a <__mulsf3+0x12>
 368:	5a c0       	rjmp	.+180    	; 0x41e <__fp_inf>
 36a:	5f c0       	rjmp	.+190    	; 0x42a <__fp_nan>
 36c:	11 24       	eor	r1, r1
 36e:	ea cf       	rjmp	.-44     	; 0x344 <__fp_szero>

00000370 <__mulsf3x>:
 370:	c6 df       	rcall	.-116    	; 0x2fe <__fp_split3>
 372:	a0 f3       	brcs	.-24     	; 0x35c <__mulsf3+0x4>

00000374 <__mulsf3_pse>:
 374:	95 9f       	mul	r25, r21
 376:	d1 f3       	breq	.-12     	; 0x36c <__mulsf3+0x14>
 378:	95 0f       	add	r25, r21
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	55 1f       	adc	r21, r21
 37e:	62 9f       	mul	r22, r18
 380:	f0 01       	movw	r30, r0
 382:	72 9f       	mul	r23, r18
 384:	bb 27       	eor	r27, r27
 386:	f0 0d       	add	r31, r0
 388:	b1 1d       	adc	r27, r1
 38a:	63 9f       	mul	r22, r19
 38c:	aa 27       	eor	r26, r26
 38e:	f0 0d       	add	r31, r0
 390:	b1 1d       	adc	r27, r1
 392:	aa 1f       	adc	r26, r26
 394:	64 9f       	mul	r22, r20
 396:	66 27       	eor	r22, r22
 398:	b0 0d       	add	r27, r0
 39a:	a1 1d       	adc	r26, r1
 39c:	66 1f       	adc	r22, r22
 39e:	82 9f       	mul	r24, r18
 3a0:	22 27       	eor	r18, r18
 3a2:	b0 0d       	add	r27, r0
 3a4:	a1 1d       	adc	r26, r1
 3a6:	62 1f       	adc	r22, r18
 3a8:	73 9f       	mul	r23, r19
 3aa:	b0 0d       	add	r27, r0
 3ac:	a1 1d       	adc	r26, r1
 3ae:	62 1f       	adc	r22, r18
 3b0:	83 9f       	mul	r24, r19
 3b2:	a0 0d       	add	r26, r0
 3b4:	61 1d       	adc	r22, r1
 3b6:	22 1f       	adc	r18, r18
 3b8:	74 9f       	mul	r23, r20
 3ba:	33 27       	eor	r19, r19
 3bc:	a0 0d       	add	r26, r0
 3be:	61 1d       	adc	r22, r1
 3c0:	23 1f       	adc	r18, r19
 3c2:	84 9f       	mul	r24, r20
 3c4:	60 0d       	add	r22, r0
 3c6:	21 1d       	adc	r18, r1
 3c8:	82 2f       	mov	r24, r18
 3ca:	76 2f       	mov	r23, r22
 3cc:	6a 2f       	mov	r22, r26
 3ce:	11 24       	eor	r1, r1
 3d0:	9f 57       	subi	r25, 0x7F	; 127
 3d2:	50 40       	sbci	r21, 0x00	; 0
 3d4:	8a f0       	brmi	.+34     	; 0x3f8 <__mulsf3_pse+0x84>
 3d6:	e1 f0       	breq	.+56     	; 0x410 <__mulsf3_pse+0x9c>
 3d8:	88 23       	and	r24, r24
 3da:	4a f0       	brmi	.+18     	; 0x3ee <__mulsf3_pse+0x7a>
 3dc:	ee 0f       	add	r30, r30
 3de:	ff 1f       	adc	r31, r31
 3e0:	bb 1f       	adc	r27, r27
 3e2:	66 1f       	adc	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	91 50       	subi	r25, 0x01	; 1
 3ea:	50 40       	sbci	r21, 0x00	; 0
 3ec:	a9 f7       	brne	.-22     	; 0x3d8 <__mulsf3_pse+0x64>
 3ee:	9e 3f       	cpi	r25, 0xFE	; 254
 3f0:	51 05       	cpc	r21, r1
 3f2:	70 f0       	brcs	.+28     	; 0x410 <__mulsf3_pse+0x9c>
 3f4:	14 c0       	rjmp	.+40     	; 0x41e <__fp_inf>
 3f6:	a6 cf       	rjmp	.-180    	; 0x344 <__fp_szero>
 3f8:	5f 3f       	cpi	r21, 0xFF	; 255
 3fa:	ec f3       	brlt	.-6      	; 0x3f6 <__mulsf3_pse+0x82>
 3fc:	98 3e       	cpi	r25, 0xE8	; 232
 3fe:	dc f3       	brlt	.-10     	; 0x3f6 <__mulsf3_pse+0x82>
 400:	86 95       	lsr	r24
 402:	77 95       	ror	r23
 404:	67 95       	ror	r22
 406:	b7 95       	ror	r27
 408:	f7 95       	ror	r31
 40a:	e7 95       	ror	r30
 40c:	9f 5f       	subi	r25, 0xFF	; 255
 40e:	c1 f7       	brne	.-16     	; 0x400 <__mulsf3_pse+0x8c>
 410:	fe 2b       	or	r31, r30
 412:	88 0f       	add	r24, r24
 414:	91 1d       	adc	r25, r1
 416:	96 95       	lsr	r25
 418:	87 95       	ror	r24
 41a:	97 f9       	bld	r25, 7
 41c:	08 95       	ret

0000041e <__fp_inf>:
 41e:	97 f9       	bld	r25, 7
 420:	9f 67       	ori	r25, 0x7F	; 127
 422:	80 e8       	ldi	r24, 0x80	; 128
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	08 95       	ret

0000042a <__fp_nan>:
 42a:	9f ef       	ldi	r25, 0xFF	; 255
 42c:	80 ec       	ldi	r24, 0xC0	; 192
 42e:	08 95       	ret

00000430 <__fp_pscA>:
 430:	00 24       	eor	r0, r0
 432:	0a 94       	dec	r0
 434:	16 16       	cp	r1, r22
 436:	17 06       	cpc	r1, r23
 438:	18 06       	cpc	r1, r24
 43a:	09 06       	cpc	r0, r25
 43c:	08 95       	ret

0000043e <__fp_pscB>:
 43e:	00 24       	eor	r0, r0
 440:	0a 94       	dec	r0
 442:	12 16       	cp	r1, r18
 444:	13 06       	cpc	r1, r19
 446:	14 06       	cpc	r1, r20
 448:	05 06       	cpc	r0, r21
 44a:	08 95       	ret

0000044c <__fp_round>:
 44c:	09 2e       	mov	r0, r25
 44e:	03 94       	inc	r0
 450:	00 0c       	add	r0, r0
 452:	11 f4       	brne	.+4      	; 0x458 <__fp_round+0xc>
 454:	88 23       	and	r24, r24
 456:	52 f0       	brmi	.+20     	; 0x46c <__stack+0xd>
 458:	bb 0f       	add	r27, r27
 45a:	40 f4       	brcc	.+16     	; 0x46c <__stack+0xd>
 45c:	bf 2b       	or	r27, r31
 45e:	11 f4       	brne	.+4      	; 0x464 <__stack+0x5>
 460:	60 ff       	sbrs	r22, 0
 462:	04 c0       	rjmp	.+8      	; 0x46c <__stack+0xd>
 464:	6f 5f       	subi	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	8f 4f       	sbci	r24, 0xFF	; 255
 46a:	9f 4f       	sbci	r25, 0xFF	; 255
 46c:	08 95       	ret

0000046e <__udivmodhi4>:
 46e:	aa 1b       	sub	r26, r26
 470:	bb 1b       	sub	r27, r27
 472:	51 e1       	ldi	r21, 0x11	; 17
 474:	07 c0       	rjmp	.+14     	; 0x484 <__udivmodhi4_ep>

00000476 <__udivmodhi4_loop>:
 476:	aa 1f       	adc	r26, r26
 478:	bb 1f       	adc	r27, r27
 47a:	a6 17       	cp	r26, r22
 47c:	b7 07       	cpc	r27, r23
 47e:	10 f0       	brcs	.+4      	; 0x484 <__udivmodhi4_ep>
 480:	a6 1b       	sub	r26, r22
 482:	b7 0b       	sbc	r27, r23

00000484 <__udivmodhi4_ep>:
 484:	88 1f       	adc	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	5a 95       	dec	r21
 48a:	a9 f7       	brne	.-22     	; 0x476 <__udivmodhi4_loop>
 48c:	80 95       	com	r24
 48e:	90 95       	com	r25
 490:	bc 01       	movw	r22, r24
 492:	cd 01       	movw	r24, r26
 494:	08 95       	ret

00000496 <_exit>:
 496:	f8 94       	cli

00000498 <__stop_program>:
 498:	ff cf       	rjmp	.-2      	; 0x498 <__stop_program>
