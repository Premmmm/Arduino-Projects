
fb1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000080a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000048b  00000000  00000000  000008b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000129  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000552  00000000  00000000  00000e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000df  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000006b8  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 03 04 	jmp	0x806	; 0x806 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_adc>:
#include<avr/io.h>
#include<util/delay.h>
void init_adc()
{
ADCSRA|=0b00000001<<ADEN;
  6c:	37 9a       	sbi	0x06, 7	; 6
ADCSRA|=0b00000001<<ADPS2;
  6e:	32 9a       	sbi	0x06, 2	; 6
ADMUX|=0b00000001<<REFS0;
  70:	3e 9a       	sbi	0x07, 6	; 7
}
  72:	08 95       	ret

00000074 <read_adc>:

unsigned int read_adc(int p)
{
ADMUX&=0b01000000;
  74:	97 b1       	in	r25, 0x07	; 7
  76:	90 74       	andi	r25, 0x40	; 64
  78:	97 b9       	out	0x07, r25	; 7
ADMUX=ADMUX|p;
  7a:	97 b1       	in	r25, 0x07	; 7
  7c:	98 2b       	or	r25, r24
  7e:	97 b9       	out	0x07, r25	; 7
ADCSRA=ADCSRA|(0b00000001<<ADSC);
  80:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&(0b00000001<<ADIF))==0)
  82:	34 9b       	sbis	0x06, 4	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <read_adc+0xe>
{}
ADCSRA=ADCSRA|(0b00000001<<ADIF);
  86:	34 9a       	sbi	0x06, 4	; 6
return(ADC);
  88:	24 b1       	in	r18, 0x04	; 4
  8a:	35 b1       	in	r19, 0x05	; 5
}
  8c:	c9 01       	movw	r24, r18
  8e:	08 95       	ret

00000090 <main>:



void main()                                         
{ 
  90:	2f 92       	push	r2
  92:	3f 92       	push	r3
  94:	4f 92       	push	r4
  96:	5f 92       	push	r5
  98:	6f 92       	push	r6
  9a:	7f 92       	push	r7
  9c:	8f 92       	push	r8
  9e:	9f 92       	push	r9
  a0:	af 92       	push	r10
  a2:	bf 92       	push	r11
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
DDRD=0b00000000;    // to set part d as input
  b4:	11 ba       	out	0x11, r1	; 17
DDRB=0b11111111;  // to set part b as output
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	87 bb       	out	0x17, r24	; 23
PORTD=0b11111111; // to pull up input
  ba:	82 bb       	out	0x12, r24	; 18
init_adc();
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <init_adc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	80 e5       	ldi	r24, 0x50	; 80
  c2:	93 ec       	ldi	r25, 0xC3	; 195
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x34>
{
z=read_adc(1);
b=(z/40);
T=25.6;
TOFF1=b;
TON1=T-TOFF1;
  c8:	29 e1       	ldi	r18, 0x19	; 25
  ca:	42 2e       	mov	r4, r18
  cc:	51 2c       	mov	r5, r1
PORTB=0b00000000;
_delay_ms(TOFF1);
}
if(f==0b11111100)   //white white; 
{
PORTB=0b00001010;   // FROWARD
  ce:	9a e0       	ldi	r25, 0x0A	; 10
  d0:	39 2e       	mov	r3, r25
PORTB=0b00000000;
_delay_ms(TOFF1);
}
if(f==0b11111101)	//white black; 
{
PORTB=0b00001001;   // RIGHT
  d2:	89 e0       	ldi	r24, 0x09	; 9
  d4:	28 2e       	mov	r2, r24
unsigned int TOFF1;
int f;

while(1)  //infinite loop
{
f=PIND;
  d6:	80 b3       	in	r24, 0x10	; 16
if(f==0b11111000)         // obstacle present 
  d8:	88 3f       	cpi	r24, 0xF8	; 248
  da:	11 f4       	brne	.+4      	; 0xe0 <main+0x50>
{  
PORTB=0b00010000;	  // buzzer       
  dc:	20 e1       	ldi	r18, 0x10	; 16
  de:	13 c0       	rjmp	.+38     	; 0x106 <main+0x76>
}
else
{
p=read_adc(0);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc>
if(p<=1000)    // LDR  and line follower
  e8:	89 5e       	subi	r24, 0xE9	; 233
  ea:	93 40       	sbci	r25, 0x03	; 3
  ec:	c0 f4       	brcc	.+48     	; 0x11e <main+0x8e>
{
f=PIND;
  ee:	80 b3       	in	r24, 0x10	; 16
  f0:	90 e0       	ldi	r25, 0x00	; 0
if(f==0b11111111)  //black black; 
  f2:	8f 3f       	cpi	r24, 0xFF	; 255
  f4:	91 05       	cpc	r25, r1
  f6:	19 f4       	brne	.+6      	; 0xfe <main+0x6e>
PORTB=0b00011010;   // BUZZ AND MOVE FORWARD
  f8:	8a e1       	ldi	r24, 0x1A	; 26
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	ec cf       	rjmp	.-40     	; 0xd6 <main+0x46>

if(f==0b11111110)	//black white ;
  fe:	8e 3f       	cpi	r24, 0xFE	; 254
 100:	91 05       	cpc	r25, r1
 102:	19 f4       	brne	.+6      	; 0x10a <main+0x7a>
PORTB=0b00000110;   // LEFT
 104:	26 e0       	ldi	r18, 0x06	; 6
 106:	28 bb       	out	0x18, r18	; 24
 108:	e6 cf       	rjmp	.-52     	; 0xd6 <main+0x46>

if(f==0b11111101)	//white black; 
 10a:	8d 3f       	cpi	r24, 0xFD	; 253
 10c:	91 05       	cpc	r25, r1
 10e:	11 f4       	brne	.+4      	; 0x114 <main+0x84>
PORTB=0b00001001;   // RIGHT
 110:	28 ba       	out	0x18, r2	; 24
 112:	e1 cf       	rjmp	.-62     	; 0xd6 <main+0x46>

if(f==0b11111100)   //white white; 
 114:	8c 3f       	cpi	r24, 0xFC	; 252
 116:	91 05       	cpc	r25, r1
 118:	f1 f6       	brne	.-68     	; 0xd6 <main+0x46>
PORTB=0b00001010;   // FROWARD
 11a:	38 ba       	out	0x18, r3	; 24
 11c:	dc cf       	rjmp	.-72     	; 0xd6 <main+0x46>

}
else if(p>1000)           // Potentiometer 
{
z=read_adc(1);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc>
b=(z/40);
 126:	68 e2       	ldi	r22, 0x28	; 40
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0e 94 ef 03 	call	0x7de	; 0x7de <__udivmodhi4>
 12e:	eb 01       	movw	r28, r22
T=25.6;
TOFF1=b;
TON1=T-TOFF1;
 130:	32 01       	movw	r6, r4
 132:	66 1a       	sub	r6, r22
 134:	77 0a       	sbc	r7, r23
f=PIND;
 136:	80 b3       	in	r24, 0x10	; 16
 138:	88 2e       	mov	r8, r24
 13a:	99 24       	eor	r9, r9
if(f==0b11111111)   //black black; 
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	88 16       	cp	r8, r24
 140:	91 04       	cpc	r9, r1
 142:	09 f0       	breq	.+2      	; 0x146 <main+0xb6>
 144:	79 c0       	rjmp	.+242    	; 0x238 <main+0x1a8>
{
PORTB=0b00011010;   // BUZZ AND MOVE FORWARD
 146:	2a e1       	ldi	r18, 0x1A	; 26
 148:	28 bb       	out	0x18, r18	; 24
_delay_ms(TON1);
 14a:	b3 01       	movw	r22, r6
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
 154:	5b 01       	movw	r10, r22
 156:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	4a e7       	ldi	r20, 0x7A	; 122
 15e:	53 e4       	ldi	r21, 0x43	; 67
 160:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 164:	7b 01       	movw	r14, r22
 166:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 e8       	ldi	r20, 0x80	; 128
 16e:	5f e3       	ldi	r21, 0x3F	; 63
 170:	0e 94 a6 02 	call	0x54c	; 0x54c <__cmpsf2>
 174:	88 23       	and	r24, r24
 176:	1c f4       	brge	.+6      	; 0x17e <main+0xee>
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	22 c0       	rjmp	.+68     	; 0x1c2 <main+0x132>
		__ticks = 1;
	else if (__tmp > 65535)
 17e:	c8 01       	movw	r24, r16
 180:	b7 01       	movw	r22, r14
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	3f ef       	ldi	r19, 0xFF	; 255
 186:	4f e7       	ldi	r20, 0x7F	; 127
 188:	57 e4       	ldi	r21, 0x47	; 71
 18a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__gesf2>
 18e:	18 16       	cp	r1, r24
 190:	a4 f4       	brge	.+40     	; 0x1ba <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 192:	c6 01       	movw	r24, r12
 194:	b5 01       	movw	r22, r10
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	40 e2       	ldi	r20, 0x20	; 32
 19c:	51 e4       	ldi	r21, 0x41	; 65
 19e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 1a2:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <main+0x122>
 1a8:	c2 01       	movw	r24, r4
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x11a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ae:	61 50       	subi	r22, 0x01	; 1
 1b0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b2:	61 15       	cp	r22, r1
 1b4:	71 05       	cpc	r23, r1
 1b6:	c1 f7       	brne	.-16     	; 0x1a8 <main+0x118>
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <main+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ba:	c8 01       	movw	r24, r16
 1bc:	b7 01       	movw	r22, r14
 1be:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 1c2:	cb 01       	movw	r24, r22
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x134>
PORTB=0b00000000;
 1c8:	18 ba       	out	0x18, r1	; 24
_delay_ms(TOFF1);
 1ca:	be 01       	movw	r22, r28
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
 1d4:	5b 01       	movw	r10, r22
 1d6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	4a e7       	ldi	r20, 0x7A	; 122
 1de:	53 e4       	ldi	r21, 0x43	; 67
 1e0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 1e4:	7b 01       	movw	r14, r22
 1e6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e8       	ldi	r20, 0x80	; 128
 1ee:	5f e3       	ldi	r21, 0x3F	; 63
 1f0:	0e 94 a6 02 	call	0x54c	; 0x54c <__cmpsf2>
 1f4:	88 23       	and	r24, r24
 1f6:	0c f4       	brge	.+2      	; 0x1fa <main+0x16a>
 1f8:	7d c0       	rjmp	.+250    	; 0x2f4 <main+0x264>
		__ticks = 1;
	else if (__tmp > 65535)
 1fa:	c8 01       	movw	r24, r16
 1fc:	b7 01       	movw	r22, r14
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	3f ef       	ldi	r19, 0xFF	; 255
 202:	4f e7       	ldi	r20, 0x7F	; 127
 204:	57 e4       	ldi	r21, 0x47	; 71
 206:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__gesf2>
 20a:	18 16       	cp	r1, r24
 20c:	0c f0       	brlt	.+2      	; 0x210 <main+0x180>
 20e:	93 c0       	rjmp	.+294    	; 0x336 <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 210:	c6 01       	movw	r24, r12
 212:	b5 01       	movw	r22, r10
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e2       	ldi	r20, 0x20	; 32
 21a:	51 e4       	ldi	r21, 0x41	; 65
 21c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 220:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 224:	05 c0       	rjmp	.+10     	; 0x230 <main+0x1a0>
 226:	c2 01       	movw	r24, r4
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x198>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22c:	61 50       	subi	r22, 0x01	; 1
 22e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 230:	61 15       	cp	r22, r1
 232:	71 05       	cpc	r23, r1
 234:	c1 f7       	brne	.-16     	; 0x226 <main+0x196>
 236:	04 c1       	rjmp	.+520    	; 0x440 <main+0x3b0>
}
if(f==0b11111110)	//black white ;
 238:	8e ef       	ldi	r24, 0xFE	; 254
 23a:	88 16       	cp	r8, r24
 23c:	91 04       	cpc	r9, r1
 23e:	09 f0       	breq	.+2      	; 0x242 <main+0x1b2>
 240:	82 c0       	rjmp	.+260    	; 0x346 <main+0x2b6>
{
PORTB=0b00000110;   // LEFT
 242:	26 e0       	ldi	r18, 0x06	; 6
 244:	28 bb       	out	0x18, r18	; 24
_delay_ms(TON1);
 246:	b3 01       	movw	r22, r6
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
 250:	5b 01       	movw	r10, r22
 252:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	4a e7       	ldi	r20, 0x7A	; 122
 25a:	53 e4       	ldi	r21, 0x43	; 67
 25c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 260:	7b 01       	movw	r14, r22
 262:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e8       	ldi	r20, 0x80	; 128
 26a:	5f e3       	ldi	r21, 0x3F	; 63
 26c:	0e 94 a6 02 	call	0x54c	; 0x54c <__cmpsf2>
 270:	88 23       	and	r24, r24
 272:	1c f4       	brge	.+6      	; 0x27a <main+0x1ea>
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	22 c0       	rjmp	.+68     	; 0x2be <main+0x22e>
		__ticks = 1;
	else if (__tmp > 65535)
 27a:	c8 01       	movw	r24, r16
 27c:	b7 01       	movw	r22, r14
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	3f ef       	ldi	r19, 0xFF	; 255
 282:	4f e7       	ldi	r20, 0x7F	; 127
 284:	57 e4       	ldi	r21, 0x47	; 71
 286:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__gesf2>
 28a:	18 16       	cp	r1, r24
 28c:	a4 f4       	brge	.+40     	; 0x2b6 <main+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 28e:	c6 01       	movw	r24, r12
 290:	b5 01       	movw	r22, r10
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	40 e2       	ldi	r20, 0x20	; 32
 298:	51 e4       	ldi	r21, 0x41	; 65
 29a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 29e:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <main+0x21e>
 2a4:	c2 01       	movw	r24, r4
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0x216>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2aa:	61 50       	subi	r22, 0x01	; 1
 2ac:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ae:	61 15       	cp	r22, r1
 2b0:	71 05       	cpc	r23, r1
 2b2:	c1 f7       	brne	.-16     	; 0x2a4 <main+0x214>
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2b6:	c8 01       	movw	r24, r16
 2b8:	b7 01       	movw	r22, r14
 2ba:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 2be:	cb 01       	movw	r24, r22
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0x230>
PORTB=0b00000000;
 2c4:	18 ba       	out	0x18, r1	; 24
_delay_ms(TOFF1);
 2c6:	be 01       	movw	r22, r28
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
 2d0:	5b 01       	movw	r10, r22
 2d2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	4a e7       	ldi	r20, 0x7A	; 122
 2da:	53 e4       	ldi	r21, 0x43	; 67
 2dc:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 2e0:	7b 01       	movw	r14, r22
 2e2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	40 e8       	ldi	r20, 0x80	; 128
 2ea:	5f e3       	ldi	r21, 0x3F	; 63
 2ec:	0e 94 a6 02 	call	0x54c	; 0x54c <__cmpsf2>
 2f0:	88 23       	and	r24, r24
 2f2:	1c f4       	brge	.+6      	; 0x2fa <main+0x26a>
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	22 c0       	rjmp	.+68     	; 0x33e <main+0x2ae>
		__ticks = 1;
	else if (__tmp > 65535)
 2fa:	c8 01       	movw	r24, r16
 2fc:	b7 01       	movw	r22, r14
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	3f ef       	ldi	r19, 0xFF	; 255
 302:	4f e7       	ldi	r20, 0x7F	; 127
 304:	57 e4       	ldi	r21, 0x47	; 71
 306:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__gesf2>
 30a:	18 16       	cp	r1, r24
 30c:	a4 f4       	brge	.+40     	; 0x336 <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 30e:	c6 01       	movw	r24, r12
 310:	b5 01       	movw	r22, r10
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	40 e2       	ldi	r20, 0x20	; 32
 318:	51 e4       	ldi	r21, 0x41	; 65
 31a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 31e:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 322:	05 c0       	rjmp	.+10     	; 0x32e <main+0x29e>
 324:	c2 01       	movw	r24, r4
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x296>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 32a:	61 50       	subi	r22, 0x01	; 1
 32c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 32e:	61 15       	cp	r22, r1
 330:	71 05       	cpc	r23, r1
 332:	c1 f7       	brne	.-16     	; 0x324 <main+0x294>
 334:	85 c0       	rjmp	.+266    	; 0x440 <main+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 336:	c8 01       	movw	r24, r16
 338:	b7 01       	movw	r22, r14
 33a:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 33e:	cb 01       	movw	r24, r22
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <main+0x2b0>
 344:	7d c0       	rjmp	.+250    	; 0x440 <main+0x3b0>
}
if(f==0b11111101)	//white black; 
 346:	8d ef       	ldi	r24, 0xFD	; 253
 348:	88 16       	cp	r8, r24
 34a:	91 04       	cpc	r9, r1
 34c:	09 f0       	breq	.+2      	; 0x350 <main+0x2c0>
 34e:	78 c0       	rjmp	.+240    	; 0x440 <main+0x3b0>
{
PORTB=0b00001001;   // RIGHT
 350:	28 ba       	out	0x18, r2	; 24
_delay_ms(TON1);
 352:	b3 01       	movw	r22, r6
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
 35c:	5b 01       	movw	r10, r22
 35e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	4a e7       	ldi	r20, 0x7A	; 122
 366:	53 e4       	ldi	r21, 0x43	; 67
 368:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 36c:	7b 01       	movw	r14, r22
 36e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e8       	ldi	r20, 0x80	; 128
 376:	5f e3       	ldi	r21, 0x3F	; 63
 378:	0e 94 a6 02 	call	0x54c	; 0x54c <__cmpsf2>
 37c:	88 23       	and	r24, r24
 37e:	1c f4       	brge	.+6      	; 0x386 <main+0x2f6>
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	22 c0       	rjmp	.+68     	; 0x3ca <main+0x33a>
		__ticks = 1;
	else if (__tmp > 65535)
 386:	c8 01       	movw	r24, r16
 388:	b7 01       	movw	r22, r14
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	3f ef       	ldi	r19, 0xFF	; 255
 38e:	4f e7       	ldi	r20, 0x7F	; 127
 390:	57 e4       	ldi	r21, 0x47	; 71
 392:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__gesf2>
 396:	18 16       	cp	r1, r24
 398:	a4 f4       	brge	.+40     	; 0x3c2 <main+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 39a:	c6 01       	movw	r24, r12
 39c:	b5 01       	movw	r22, r10
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	40 e2       	ldi	r20, 0x20	; 32
 3a4:	51 e4       	ldi	r21, 0x41	; 65
 3a6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 3aa:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <main+0x32a>
 3b0:	c2 01       	movw	r24, r4
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0x322>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b6:	61 50       	subi	r22, 0x01	; 1
 3b8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ba:	61 15       	cp	r22, r1
 3bc:	71 05       	cpc	r23, r1
 3be:	c1 f7       	brne	.-16     	; 0x3b0 <main+0x320>
 3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <main+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3c2:	c8 01       	movw	r24, r16
 3c4:	b7 01       	movw	r22, r14
 3c6:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 3ca:	cb 01       	movw	r24, r22
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <main+0x33c>
PORTB=0b00000000;
 3d0:	18 ba       	out	0x18, r1	; 24
_delay_ms(TOFF1);
 3d2:	be 01       	movw	r22, r28
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
 3dc:	5b 01       	movw	r10, r22
 3de:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	4a e7       	ldi	r20, 0x7A	; 122
 3e6:	53 e4       	ldi	r21, 0x43	; 67
 3e8:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 3ec:	7b 01       	movw	r14, r22
 3ee:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	40 e8       	ldi	r20, 0x80	; 128
 3f6:	5f e3       	ldi	r21, 0x3F	; 63
 3f8:	0e 94 a6 02 	call	0x54c	; 0x54c <__cmpsf2>
 3fc:	88 23       	and	r24, r24
 3fe:	0c f4       	brge	.+2      	; 0x402 <main+0x372>
 400:	7c c0       	rjmp	.+248    	; 0x4fa <__stack+0x9b>
		__ticks = 1;
	else if (__tmp > 65535)
 402:	c8 01       	movw	r24, r16
 404:	b7 01       	movw	r22, r14
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	3f ef       	ldi	r19, 0xFF	; 255
 40a:	4f e7       	ldi	r20, 0x7F	; 127
 40c:	57 e4       	ldi	r21, 0x47	; 71
 40e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__gesf2>
 412:	18 16       	cp	r1, r24
 414:	0c f0       	brlt	.+2      	; 0x418 <main+0x388>
 416:	92 c0       	rjmp	.+292    	; 0x53c <__stack+0xdd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 418:	c6 01       	movw	r24, r12
 41a:	b5 01       	movw	r22, r10
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	40 e2       	ldi	r20, 0x20	; 32
 422:	51 e4       	ldi	r21, 0x41	; 65
 424:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 428:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 42c:	05 c0       	rjmp	.+10     	; 0x438 <main+0x3a8>
 42e:	c2 01       	movw	r24, r4
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <main+0x3a0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 434:	61 50       	subi	r22, 0x01	; 1
 436:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 438:	61 15       	cp	r22, r1
 43a:	71 05       	cpc	r23, r1
 43c:	c1 f7       	brne	.-16     	; 0x42e <main+0x39e>
 43e:	4b ce       	rjmp	.-874    	; 0xd6 <main+0x46>
}
if(f==0b11111100)   //white white; 
 440:	2c ef       	ldi	r18, 0xFC	; 252
 442:	82 16       	cp	r8, r18
 444:	91 04       	cpc	r9, r1
 446:	09 f0       	breq	.+2      	; 0x44a <main+0x3ba>
 448:	46 ce       	rjmp	.-884    	; 0xd6 <main+0x46>
{
PORTB=0b00001010;   // FROWARD
 44a:	38 ba       	out	0x18, r3	; 24
_delay_ms(TON1);
 44c:	b3 01       	movw	r22, r6
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
 456:	5b 01       	movw	r10, r22
 458:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	4a e7       	ldi	r20, 0x7A	; 122
 460:	53 e4       	ldi	r21, 0x43	; 67
 462:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 466:	7b 01       	movw	r14, r22
 468:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	40 e8       	ldi	r20, 0x80	; 128
 470:	5f e3       	ldi	r21, 0x3F	; 63
 472:	0e 94 a6 02 	call	0x54c	; 0x54c <__cmpsf2>
 476:	88 23       	and	r24, r24
 478:	1c f4       	brge	.+6      	; 0x480 <__stack+0x21>
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	22 c0       	rjmp	.+68     	; 0x4c4 <__stack+0x65>
		__ticks = 1;
	else if (__tmp > 65535)
 480:	c8 01       	movw	r24, r16
 482:	b7 01       	movw	r22, r14
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	3f ef       	ldi	r19, 0xFF	; 255
 488:	4f e7       	ldi	r20, 0x7F	; 127
 48a:	57 e4       	ldi	r21, 0x47	; 71
 48c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__gesf2>
 490:	18 16       	cp	r1, r24
 492:	a4 f4       	brge	.+40     	; 0x4bc <__stack+0x5d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 494:	c6 01       	movw	r24, r12
 496:	b5 01       	movw	r22, r10
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	40 e2       	ldi	r20, 0x20	; 32
 49e:	51 e4       	ldi	r21, 0x41	; 65
 4a0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 4a4:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <__stack+0x55>
 4aa:	c2 01       	movw	r24, r4
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <__stack+0x4d>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4b0:	61 50       	subi	r22, 0x01	; 1
 4b2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4b4:	61 15       	cp	r22, r1
 4b6:	71 05       	cpc	r23, r1
 4b8:	c1 f7       	brne	.-16     	; 0x4aa <__stack+0x4b>
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__stack+0x6b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4bc:	c8 01       	movw	r24, r16
 4be:	b7 01       	movw	r22, r14
 4c0:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 4c4:	cb 01       	movw	r24, r22
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__stack+0x67>
PORTB=0b00000000;
 4ca:	18 ba       	out	0x18, r1	; 24
_delay_ms(TOFF1);
 4cc:	be 01       	movw	r22, r28
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
 4d6:	5b 01       	movw	r10, r22
 4d8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	4a e7       	ldi	r20, 0x7A	; 122
 4e0:	53 e4       	ldi	r21, 0x43	; 67
 4e2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 4e6:	7b 01       	movw	r14, r22
 4e8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	40 e8       	ldi	r20, 0x80	; 128
 4f0:	5f e3       	ldi	r21, 0x3F	; 63
 4f2:	0e 94 a6 02 	call	0x54c	; 0x54c <__cmpsf2>
 4f6:	88 23       	and	r24, r24
 4f8:	1c f4       	brge	.+6      	; 0x500 <__stack+0xa1>
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	22 c0       	rjmp	.+68     	; 0x544 <__stack+0xe5>
		__ticks = 1;
	else if (__tmp > 65535)
 500:	c8 01       	movw	r24, r16
 502:	b7 01       	movw	r22, r14
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	3f ef       	ldi	r19, 0xFF	; 255
 508:	4f e7       	ldi	r20, 0x7F	; 127
 50a:	57 e4       	ldi	r21, 0x47	; 71
 50c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__gesf2>
 510:	18 16       	cp	r1, r24
 512:	a4 f4       	brge	.+40     	; 0x53c <__stack+0xdd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 514:	c6 01       	movw	r24, r12
 516:	b5 01       	movw	r22, r10
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	40 e2       	ldi	r20, 0x20	; 32
 51e:	51 e4       	ldi	r21, 0x41	; 65
 520:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 524:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 528:	05 c0       	rjmp	.+10     	; 0x534 <__stack+0xd5>
 52a:	c2 01       	movw	r24, r4
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <__stack+0xcd>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 530:	61 50       	subi	r22, 0x01	; 1
 532:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 534:	61 15       	cp	r22, r1
 536:	71 05       	cpc	r23, r1
 538:	c1 f7       	brne	.-16     	; 0x52a <__stack+0xcb>
 53a:	cd cd       	rjmp	.-1126   	; 0xd6 <main+0x46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 53c:	c8 01       	movw	r24, r16
 53e:	b7 01       	movw	r22, r14
 540:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 544:	cb 01       	movw	r24, r22
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <__stack+0xe7>
 54a:	c5 cd       	rjmp	.-1142   	; 0xd6 <main+0x46>

0000054c <__cmpsf2>:
 54c:	6c d0       	rcall	.+216    	; 0x626 <__fp_cmp>
 54e:	08 f4       	brcc	.+2      	; 0x552 <__cmpsf2+0x6>
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	08 95       	ret

00000554 <__fixunssfsi>:
 554:	94 d0       	rcall	.+296    	; 0x67e <__fp_splitA>
 556:	88 f0       	brcs	.+34     	; 0x57a <__fixunssfsi+0x26>
 558:	9f 57       	subi	r25, 0x7F	; 127
 55a:	90 f0       	brcs	.+36     	; 0x580 <__fixunssfsi+0x2c>
 55c:	b9 2f       	mov	r27, r25
 55e:	99 27       	eor	r25, r25
 560:	b7 51       	subi	r27, 0x17	; 23
 562:	a0 f0       	brcs	.+40     	; 0x58c <__fixunssfsi+0x38>
 564:	d1 f0       	breq	.+52     	; 0x59a <__fixunssfsi+0x46>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	1a f0       	brmi	.+6      	; 0x576 <__fixunssfsi+0x22>
 570:	ba 95       	dec	r27
 572:	c9 f7       	brne	.-14     	; 0x566 <__fixunssfsi+0x12>
 574:	12 c0       	rjmp	.+36     	; 0x59a <__fixunssfsi+0x46>
 576:	b1 30       	cpi	r27, 0x01	; 1
 578:	81 f0       	breq	.+32     	; 0x59a <__fixunssfsi+0x46>
 57a:	9b d0       	rcall	.+310    	; 0x6b2 <__fp_zero>
 57c:	b1 e0       	ldi	r27, 0x01	; 1
 57e:	08 95       	ret
 580:	98 c0       	rjmp	.+304    	; 0x6b2 <__fp_zero>
 582:	67 2f       	mov	r22, r23
 584:	78 2f       	mov	r23, r24
 586:	88 27       	eor	r24, r24
 588:	b8 5f       	subi	r27, 0xF8	; 248
 58a:	39 f0       	breq	.+14     	; 0x59a <__fixunssfsi+0x46>
 58c:	b9 3f       	cpi	r27, 0xF9	; 249
 58e:	cc f3       	brlt	.-14     	; 0x582 <__fixunssfsi+0x2e>
 590:	86 95       	lsr	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b3 95       	inc	r27
 598:	d9 f7       	brne	.-10     	; 0x590 <__fixunssfsi+0x3c>
 59a:	3e f4       	brtc	.+14     	; 0x5aa <__fixunssfsi+0x56>
 59c:	90 95       	com	r25
 59e:	80 95       	com	r24
 5a0:	70 95       	com	r23
 5a2:	61 95       	neg	r22
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__floatunsisf>:
 5ac:	e8 94       	clt
 5ae:	09 c0       	rjmp	.+18     	; 0x5c2 <__floatsisf+0x12>

000005b0 <__floatsisf>:
 5b0:	97 fb       	bst	r25, 7
 5b2:	3e f4       	brtc	.+14     	; 0x5c2 <__floatsisf+0x12>
 5b4:	90 95       	com	r25
 5b6:	80 95       	com	r24
 5b8:	70 95       	com	r23
 5ba:	61 95       	neg	r22
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	8f 4f       	sbci	r24, 0xFF	; 255
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	99 23       	and	r25, r25
 5c4:	a9 f0       	breq	.+42     	; 0x5f0 <__floatsisf+0x40>
 5c6:	f9 2f       	mov	r31, r25
 5c8:	96 e9       	ldi	r25, 0x96	; 150
 5ca:	bb 27       	eor	r27, r27
 5cc:	93 95       	inc	r25
 5ce:	f6 95       	lsr	r31
 5d0:	87 95       	ror	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	b7 95       	ror	r27
 5d8:	f1 11       	cpse	r31, r1
 5da:	f8 cf       	rjmp	.-16     	; 0x5cc <__floatsisf+0x1c>
 5dc:	fa f4       	brpl	.+62     	; 0x61c <__floatsisf+0x6c>
 5de:	bb 0f       	add	r27, r27
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__floatsisf+0x36>
 5e2:	60 ff       	sbrs	r22, 0
 5e4:	1b c0       	rjmp	.+54     	; 0x61c <__floatsisf+0x6c>
 5e6:	6f 5f       	subi	r22, 0xFF	; 255
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	16 c0       	rjmp	.+44     	; 0x61c <__floatsisf+0x6c>
 5f0:	88 23       	and	r24, r24
 5f2:	11 f0       	breq	.+4      	; 0x5f8 <__floatsisf+0x48>
 5f4:	96 e9       	ldi	r25, 0x96	; 150
 5f6:	11 c0       	rjmp	.+34     	; 0x61a <__floatsisf+0x6a>
 5f8:	77 23       	and	r23, r23
 5fa:	21 f0       	breq	.+8      	; 0x604 <__floatsisf+0x54>
 5fc:	9e e8       	ldi	r25, 0x8E	; 142
 5fe:	87 2f       	mov	r24, r23
 600:	76 2f       	mov	r23, r22
 602:	05 c0       	rjmp	.+10     	; 0x60e <__floatsisf+0x5e>
 604:	66 23       	and	r22, r22
 606:	71 f0       	breq	.+28     	; 0x624 <__floatsisf+0x74>
 608:	96 e8       	ldi	r25, 0x86	; 134
 60a:	86 2f       	mov	r24, r22
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	2a f0       	brmi	.+10     	; 0x61c <__floatsisf+0x6c>
 612:	9a 95       	dec	r25
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	88 1f       	adc	r24, r24
 61a:	da f7       	brpl	.-10     	; 0x612 <__floatsisf+0x62>
 61c:	88 0f       	add	r24, r24
 61e:	96 95       	lsr	r25
 620:	87 95       	ror	r24
 622:	97 f9       	bld	r25, 7
 624:	08 95       	ret

00000626 <__fp_cmp>:
 626:	99 0f       	add	r25, r25
 628:	00 08       	sbc	r0, r0
 62a:	55 0f       	add	r21, r21
 62c:	aa 0b       	sbc	r26, r26
 62e:	e0 e8       	ldi	r30, 0x80	; 128
 630:	fe ef       	ldi	r31, 0xFE	; 254
 632:	16 16       	cp	r1, r22
 634:	17 06       	cpc	r1, r23
 636:	e8 07       	cpc	r30, r24
 638:	f9 07       	cpc	r31, r25
 63a:	c0 f0       	brcs	.+48     	; 0x66c <__fp_cmp+0x46>
 63c:	12 16       	cp	r1, r18
 63e:	13 06       	cpc	r1, r19
 640:	e4 07       	cpc	r30, r20
 642:	f5 07       	cpc	r31, r21
 644:	98 f0       	brcs	.+38     	; 0x66c <__fp_cmp+0x46>
 646:	62 1b       	sub	r22, r18
 648:	73 0b       	sbc	r23, r19
 64a:	84 0b       	sbc	r24, r20
 64c:	95 0b       	sbc	r25, r21
 64e:	39 f4       	brne	.+14     	; 0x65e <__fp_cmp+0x38>
 650:	0a 26       	eor	r0, r26
 652:	61 f0       	breq	.+24     	; 0x66c <__fp_cmp+0x46>
 654:	23 2b       	or	r18, r19
 656:	24 2b       	or	r18, r20
 658:	25 2b       	or	r18, r21
 65a:	21 f4       	brne	.+8      	; 0x664 <__fp_cmp+0x3e>
 65c:	08 95       	ret
 65e:	0a 26       	eor	r0, r26
 660:	09 f4       	brne	.+2      	; 0x664 <__fp_cmp+0x3e>
 662:	a1 40       	sbci	r26, 0x01	; 1
 664:	a6 95       	lsr	r26
 666:	8f ef       	ldi	r24, 0xFF	; 255
 668:	81 1d       	adc	r24, r1
 66a:	81 1d       	adc	r24, r1
 66c:	08 95       	ret

0000066e <__fp_split3>:
 66e:	57 fd       	sbrc	r21, 7
 670:	90 58       	subi	r25, 0x80	; 128
 672:	44 0f       	add	r20, r20
 674:	55 1f       	adc	r21, r21
 676:	59 f0       	breq	.+22     	; 0x68e <__fp_splitA+0x10>
 678:	5f 3f       	cpi	r21, 0xFF	; 255
 67a:	71 f0       	breq	.+28     	; 0x698 <__fp_splitA+0x1a>
 67c:	47 95       	ror	r20

0000067e <__fp_splitA>:
 67e:	88 0f       	add	r24, r24
 680:	97 fb       	bst	r25, 7
 682:	99 1f       	adc	r25, r25
 684:	61 f0       	breq	.+24     	; 0x69e <__fp_splitA+0x20>
 686:	9f 3f       	cpi	r25, 0xFF	; 255
 688:	79 f0       	breq	.+30     	; 0x6a8 <__fp_splitA+0x2a>
 68a:	87 95       	ror	r24
 68c:	08 95       	ret
 68e:	12 16       	cp	r1, r18
 690:	13 06       	cpc	r1, r19
 692:	14 06       	cpc	r1, r20
 694:	55 1f       	adc	r21, r21
 696:	f2 cf       	rjmp	.-28     	; 0x67c <__fp_split3+0xe>
 698:	46 95       	lsr	r20
 69a:	f1 df       	rcall	.-30     	; 0x67e <__fp_splitA>
 69c:	08 c0       	rjmp	.+16     	; 0x6ae <__fp_splitA+0x30>
 69e:	16 16       	cp	r1, r22
 6a0:	17 06       	cpc	r1, r23
 6a2:	18 06       	cpc	r1, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	f1 cf       	rjmp	.-30     	; 0x68a <__fp_splitA+0xc>
 6a8:	86 95       	lsr	r24
 6aa:	71 05       	cpc	r23, r1
 6ac:	61 05       	cpc	r22, r1
 6ae:	08 94       	sec
 6b0:	08 95       	ret

000006b2 <__fp_zero>:
 6b2:	e8 94       	clt

000006b4 <__fp_szero>:
 6b4:	bb 27       	eor	r27, r27
 6b6:	66 27       	eor	r22, r22
 6b8:	77 27       	eor	r23, r23
 6ba:	cb 01       	movw	r24, r22
 6bc:	97 f9       	bld	r25, 7
 6be:	08 95       	ret

000006c0 <__gesf2>:
 6c0:	b2 df       	rcall	.-156    	; 0x626 <__fp_cmp>
 6c2:	08 f4       	brcc	.+2      	; 0x6c6 <__gesf2+0x6>
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	08 95       	ret

000006c8 <__mulsf3>:
 6c8:	0b d0       	rcall	.+22     	; 0x6e0 <__mulsf3x>
 6ca:	78 c0       	rjmp	.+240    	; 0x7bc <__fp_round>
 6cc:	69 d0       	rcall	.+210    	; 0x7a0 <__fp_pscA>
 6ce:	28 f0       	brcs	.+10     	; 0x6da <__mulsf3+0x12>
 6d0:	6e d0       	rcall	.+220    	; 0x7ae <__fp_pscB>
 6d2:	18 f0       	brcs	.+6      	; 0x6da <__mulsf3+0x12>
 6d4:	95 23       	and	r25, r21
 6d6:	09 f0       	breq	.+2      	; 0x6da <__mulsf3+0x12>
 6d8:	5a c0       	rjmp	.+180    	; 0x78e <__fp_inf>
 6da:	5f c0       	rjmp	.+190    	; 0x79a <__fp_nan>
 6dc:	11 24       	eor	r1, r1
 6de:	ea cf       	rjmp	.-44     	; 0x6b4 <__fp_szero>

000006e0 <__mulsf3x>:
 6e0:	c6 df       	rcall	.-116    	; 0x66e <__fp_split3>
 6e2:	a0 f3       	brcs	.-24     	; 0x6cc <__mulsf3+0x4>

000006e4 <__mulsf3_pse>:
 6e4:	95 9f       	mul	r25, r21
 6e6:	d1 f3       	breq	.-12     	; 0x6dc <__mulsf3+0x14>
 6e8:	95 0f       	add	r25, r21
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	55 1f       	adc	r21, r21
 6ee:	62 9f       	mul	r22, r18
 6f0:	f0 01       	movw	r30, r0
 6f2:	72 9f       	mul	r23, r18
 6f4:	bb 27       	eor	r27, r27
 6f6:	f0 0d       	add	r31, r0
 6f8:	b1 1d       	adc	r27, r1
 6fa:	63 9f       	mul	r22, r19
 6fc:	aa 27       	eor	r26, r26
 6fe:	f0 0d       	add	r31, r0
 700:	b1 1d       	adc	r27, r1
 702:	aa 1f       	adc	r26, r26
 704:	64 9f       	mul	r22, r20
 706:	66 27       	eor	r22, r22
 708:	b0 0d       	add	r27, r0
 70a:	a1 1d       	adc	r26, r1
 70c:	66 1f       	adc	r22, r22
 70e:	82 9f       	mul	r24, r18
 710:	22 27       	eor	r18, r18
 712:	b0 0d       	add	r27, r0
 714:	a1 1d       	adc	r26, r1
 716:	62 1f       	adc	r22, r18
 718:	73 9f       	mul	r23, r19
 71a:	b0 0d       	add	r27, r0
 71c:	a1 1d       	adc	r26, r1
 71e:	62 1f       	adc	r22, r18
 720:	83 9f       	mul	r24, r19
 722:	a0 0d       	add	r26, r0
 724:	61 1d       	adc	r22, r1
 726:	22 1f       	adc	r18, r18
 728:	74 9f       	mul	r23, r20
 72a:	33 27       	eor	r19, r19
 72c:	a0 0d       	add	r26, r0
 72e:	61 1d       	adc	r22, r1
 730:	23 1f       	adc	r18, r19
 732:	84 9f       	mul	r24, r20
 734:	60 0d       	add	r22, r0
 736:	21 1d       	adc	r18, r1
 738:	82 2f       	mov	r24, r18
 73a:	76 2f       	mov	r23, r22
 73c:	6a 2f       	mov	r22, r26
 73e:	11 24       	eor	r1, r1
 740:	9f 57       	subi	r25, 0x7F	; 127
 742:	50 40       	sbci	r21, 0x00	; 0
 744:	8a f0       	brmi	.+34     	; 0x768 <__mulsf3_pse+0x84>
 746:	e1 f0       	breq	.+56     	; 0x780 <__mulsf3_pse+0x9c>
 748:	88 23       	and	r24, r24
 74a:	4a f0       	brmi	.+18     	; 0x75e <__mulsf3_pse+0x7a>
 74c:	ee 0f       	add	r30, r30
 74e:	ff 1f       	adc	r31, r31
 750:	bb 1f       	adc	r27, r27
 752:	66 1f       	adc	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	91 50       	subi	r25, 0x01	; 1
 75a:	50 40       	sbci	r21, 0x00	; 0
 75c:	a9 f7       	brne	.-22     	; 0x748 <__mulsf3_pse+0x64>
 75e:	9e 3f       	cpi	r25, 0xFE	; 254
 760:	51 05       	cpc	r21, r1
 762:	70 f0       	brcs	.+28     	; 0x780 <__mulsf3_pse+0x9c>
 764:	14 c0       	rjmp	.+40     	; 0x78e <__fp_inf>
 766:	a6 cf       	rjmp	.-180    	; 0x6b4 <__fp_szero>
 768:	5f 3f       	cpi	r21, 0xFF	; 255
 76a:	ec f3       	brlt	.-6      	; 0x766 <__mulsf3_pse+0x82>
 76c:	98 3e       	cpi	r25, 0xE8	; 232
 76e:	dc f3       	brlt	.-10     	; 0x766 <__mulsf3_pse+0x82>
 770:	86 95       	lsr	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	b7 95       	ror	r27
 778:	f7 95       	ror	r31
 77a:	e7 95       	ror	r30
 77c:	9f 5f       	subi	r25, 0xFF	; 255
 77e:	c1 f7       	brne	.-16     	; 0x770 <__mulsf3_pse+0x8c>
 780:	fe 2b       	or	r31, r30
 782:	88 0f       	add	r24, r24
 784:	91 1d       	adc	r25, r1
 786:	96 95       	lsr	r25
 788:	87 95       	ror	r24
 78a:	97 f9       	bld	r25, 7
 78c:	08 95       	ret

0000078e <__fp_inf>:
 78e:	97 f9       	bld	r25, 7
 790:	9f 67       	ori	r25, 0x7F	; 127
 792:	80 e8       	ldi	r24, 0x80	; 128
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	08 95       	ret

0000079a <__fp_nan>:
 79a:	9f ef       	ldi	r25, 0xFF	; 255
 79c:	80 ec       	ldi	r24, 0xC0	; 192
 79e:	08 95       	ret

000007a0 <__fp_pscA>:
 7a0:	00 24       	eor	r0, r0
 7a2:	0a 94       	dec	r0
 7a4:	16 16       	cp	r1, r22
 7a6:	17 06       	cpc	r1, r23
 7a8:	18 06       	cpc	r1, r24
 7aa:	09 06       	cpc	r0, r25
 7ac:	08 95       	ret

000007ae <__fp_pscB>:
 7ae:	00 24       	eor	r0, r0
 7b0:	0a 94       	dec	r0
 7b2:	12 16       	cp	r1, r18
 7b4:	13 06       	cpc	r1, r19
 7b6:	14 06       	cpc	r1, r20
 7b8:	05 06       	cpc	r0, r21
 7ba:	08 95       	ret

000007bc <__fp_round>:
 7bc:	09 2e       	mov	r0, r25
 7be:	03 94       	inc	r0
 7c0:	00 0c       	add	r0, r0
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__fp_round+0xc>
 7c4:	88 23       	and	r24, r24
 7c6:	52 f0       	brmi	.+20     	; 0x7dc <__fp_round+0x20>
 7c8:	bb 0f       	add	r27, r27
 7ca:	40 f4       	brcc	.+16     	; 0x7dc <__fp_round+0x20>
 7cc:	bf 2b       	or	r27, r31
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__fp_round+0x18>
 7d0:	60 ff       	sbrs	r22, 0
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <__fp_round+0x20>
 7d4:	6f 5f       	subi	r22, 0xFF	; 255
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255
 7d8:	8f 4f       	sbci	r24, 0xFF	; 255
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	08 95       	ret

000007de <__udivmodhi4>:
 7de:	aa 1b       	sub	r26, r26
 7e0:	bb 1b       	sub	r27, r27
 7e2:	51 e1       	ldi	r21, 0x11	; 17
 7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <__udivmodhi4_ep>

000007e6 <__udivmodhi4_loop>:
 7e6:	aa 1f       	adc	r26, r26
 7e8:	bb 1f       	adc	r27, r27
 7ea:	a6 17       	cp	r26, r22
 7ec:	b7 07       	cpc	r27, r23
 7ee:	10 f0       	brcs	.+4      	; 0x7f4 <__udivmodhi4_ep>
 7f0:	a6 1b       	sub	r26, r22
 7f2:	b7 0b       	sbc	r27, r23

000007f4 <__udivmodhi4_ep>:
 7f4:	88 1f       	adc	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	5a 95       	dec	r21
 7fa:	a9 f7       	brne	.-22     	; 0x7e6 <__udivmodhi4_loop>
 7fc:	80 95       	com	r24
 7fe:	90 95       	com	r25
 800:	bc 01       	movw	r22, r24
 802:	cd 01       	movw	r24, r26
 804:	08 95       	ret

00000806 <_exit>:
 806:	f8 94       	cli

00000808 <__stop_program>:
 808:	ff cf       	rjmp	.-2      	; 0x808 <__stop_program>
